//! –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ rustdb
//! 
//! –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ B+ –¥–µ—Ä–µ–≤–∞ –∏ —Ö–µ—à-–∏–Ω–¥–µ–∫—Å–æ–≤
//! –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö.

use rustdb::storage::index::{BPlusTree, SimpleHashIndex, Index};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üå≥ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ rustdb");
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è B+ –¥–µ—Ä–µ–≤–∞
    println!("\nüìä B+ –¥–µ—Ä–µ–≤–æ:");
    btree_example()?;
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ—à-–∏–Ω–¥–µ–∫—Å–∞
    println!("\nüîó –•–µ—à-–∏–Ω–¥–µ–∫—Å:");
    hash_index_example()?;
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    println!("\n‚ö° –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:");
    performance_comparison()?;
    
    Ok(())
}

fn btree_example() -> Result<(), Box<dyn std::error::Error>> {
    let mut btree: BPlusTree<i32, String> = BPlusTree::new_default();
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    println!("–í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ B+ –¥–µ—Ä–µ–≤–æ...");
    for i in [5, 2, 8, 1, 9, 3, 7, 4, 6] {
        btree.insert(i, format!("–ó–Ω–∞—á–µ–Ω–∏–µ {}", i))?;
    }
    
    println!("–†–∞–∑–º–µ—Ä –¥–µ—Ä–µ–≤–∞: {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", btree.size());
    
    // –ü–æ–∏—Å–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    println!("–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:");
    for key in [1, 5, 9, 10] {
        match btree.search(&key)? {
            Some(value) => println!("  –ö–ª—é—á {}: {}", key, value),
            None => println!("  –ö–ª—é—á {} –Ω–µ –Ω–∞–π–¥–µ–Ω", key),
        }
    }
    
    // –î–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
    println!("–î–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (3-7):");
    let range_results = btree.range_search(&3, &7)?;
    for (key, value) in range_results {
        println!("  {}: {}", key, value);
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    let stats = btree.get_statistics();
    println!("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ B+ –¥–µ—Ä–µ–≤–∞:");
    println!("  –û–ø–µ—Ä–∞—Ü–∏–π –≤—Å—Ç–∞–≤–∫–∏: {}", stats.insert_operations);
    println!("  –ì–ª—É–±–∏–Ω–∞: {}", stats.depth);
    println!("  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {:.2}", stats.fill_factor);
    
    Ok(())
}

fn hash_index_example() -> Result<(), Box<dyn std::error::Error>> {
    let mut hash_index: SimpleHashIndex<String, i32> = SimpleHashIndex::new();
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    println!("–í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ö–µ—à-–∏–Ω–¥–µ–∫—Å...");
    let users = [
        ("alice", 25),
        ("bob", 30),
        ("charlie", 35),
        ("diana", 28),
        ("eve", 32),
    ];
    
    for (name, age) in users {
        hash_index.insert(name.to_string(), age)?;
    }
    
    println!("–†–∞–∑–º–µ—Ä –∏–Ω–¥–µ–∫—Å–∞: {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", hash_index.size());
    
    // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    println!("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:");
    for name in ["alice", "bob", "frank"] {
        match hash_index.search(&name.to_string())? {
            Some(age) => println!("  {}: {} –ª–µ—Ç", name, age),
            None => println!("  {} –Ω–µ –Ω–∞–π–¥–µ–Ω", name),
        }
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    println!("–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'charlie'...");
    if hash_index.delete(&"charlie".to_string())? {
        println!("  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω");
    }
    
    println!("–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", hash_index.size());
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    println!("–û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç Alice...");
    hash_index.insert("alice".to_string(), 26)?;
    
    if let Some(age) = hash_index.search(&"alice".to_string())? {
        println!("  –ù–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç Alice: {} –ª–µ—Ç", age);
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    let stats = hash_index.get_statistics();
    println!("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–µ—à-–∏–Ω–¥–µ–∫—Å–∞:");
    println!("  –û–ø–µ—Ä–∞—Ü–∏–π –≤—Å—Ç–∞–≤–∫–∏: {}", stats.insert_operations);
    println!("  –û–ø–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è: {}", stats.delete_operations);
    println!("  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {:.2}", stats.fill_factor);
    
    Ok(())
}

fn performance_comparison() -> Result<(), Box<dyn std::error::Error>> {
    use std::time::Instant;
    
    const N: i32 = 10000;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º B+ –¥–µ—Ä–µ–≤–æ
    let mut btree: BPlusTree<i32, String> = BPlusTree::new_default();
    let start = Instant::now();
    
    for i in 1..=N {
        btree.insert(i, format!("value_{}", i))?;
    }
    
    let btree_insert_time = start.elapsed();
    
    let start = Instant::now();
    for i in 1..=N {
        let _ = btree.search(&i)?;
    }
    let btree_search_time = start.elapsed();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö–µ—à-–∏–Ω–¥–µ–∫—Å
    let mut hash_index: SimpleHashIndex<i32, String> = SimpleHashIndex::with_capacity(N as usize);
    let start = Instant::now();
    
    for i in 1..=N {
        hash_index.insert(i, format!("value_{}", i))?;
    }
    
    let hash_insert_time = start.elapsed();
    
    let start = Instant::now();
    for i in 1..=N {
        let _ = hash_index.search(&i)?;
    }
    let hash_search_time = start.elapsed();
    
    println!("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", N);
    println!("B+ –¥–µ—Ä–µ–≤–æ:");
    println!("  –í—Ä–µ–º—è –≤—Å—Ç–∞–≤–∫–∏: {:?}", btree_insert_time);
    println!("  –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {:?}", btree_search_time);
    println!("  –ì–ª—É–±–∏–Ω–∞: {}", btree.get_statistics().depth);
    
    println!("–•–µ—à-–∏–Ω–¥–µ–∫—Å:");
    println!("  –í—Ä–µ–º—è –≤—Å—Ç–∞–≤–∫–∏: {:?}", hash_insert_time);
    println!("  –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {:?}", hash_search_time);
    println!("  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {:.2}", hash_index.get_statistics().fill_factor);
    
    println!("\n–í—ã–≤–æ–¥—ã:");
    if hash_search_time < btree_search_time {
        println!("  ‚úÖ –•–µ—à-–∏–Ω–¥–µ–∫—Å –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
    } else {
        println!("  ‚úÖ B+ –¥–µ—Ä–µ–≤–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞");
    }
    println!("  üìä B+ –¥–µ—Ä–µ–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã");
    println!("  üîó –•–µ—à-–∏–Ω–¥–µ–∫—Å –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞");
    
    Ok(())
}
