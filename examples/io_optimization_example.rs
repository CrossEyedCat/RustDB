//! –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ I/O –≤ RustBD
//!
//! –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
//! - –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏
//! - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏
//! - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å LRU –ø–æ–ª–∏—Ç–∏–∫–æ–π
//! - –ü—Ä–µ–¥–≤—ã–±–æ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö
//! - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

use rustbd::storage::{
    io_optimization::{BufferedIoManager, IoBufferConfig},
    optimized_file_manager::OptimizedFileManager,
    database_file::{DatabaseFileType, ExtensionStrategy, BLOCK_SIZE},
};
use rustbd::common::Result;
use std::time::{Duration, Instant};
use tokio::time::sleep;
use rand::prelude::*;

#[tokio::main]
async fn main() -> Result<()> {
    println!("=== –ü—Ä–∏–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ I/O –æ–ø–µ—Ä–∞—Ü–∏–π RustBD ===\n");

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ I/O –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    demonstrate_buffered_io().await?;
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    demonstrate_optimized_file_manager().await?;
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    demonstrate_cache_performance_simple().await?;
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    demonstrate_monitoring().await?;

    println!("\nüéâ –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!");
    Ok(())
}

async fn demonstrate_buffered_io() -> Result<()> {
    println!("üíæ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ I/O ===");
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    let mut config = IoBufferConfig::default();
    config.max_write_buffer_size = 500;
    config.max_buffer_time = Duration::from_millis(50);
    config.page_cache_size = 1000;
    config.enable_prefetch = true;
    config.prefetch_window_size = 5;
    
    println!("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è I/O:");
    println!("   - –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –∑–∞–ø–∏—Å–∏: {} –æ–ø–µ—Ä–∞—Ü–∏–π", config.max_write_buffer_size);
    println!("   - –í—Ä–µ–º—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏: {:?}", config.max_buffer_time);
    println!("   - –†–∞–∑–º–µ—Ä –∫—ç—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü: {} —Å—Ç—Ä–∞–Ω–∏—Ü", config.page_cache_size);
    println!("   - –ü—Ä–µ–¥–≤—ã–±–æ—Ä–∫–∞: {} (–æ–∫–Ω–æ: {})", config.enable_prefetch, config.prefetch_window_size);
    
    let manager = BufferedIoManager::new(config);
    
    println!("\nüìù –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏...");
    let start_time = Instant::now();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏
    for i in 0..100 {
        let data = vec![(i % 256) as u8; BLOCK_SIZE];
        manager.write_page_async(1, i, data).await?;
        
        if i % 20 == 0 {
            print!(".");
        }
    }
    
    let write_time = start_time.elapsed();
    println!("\n   ‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ 100 —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ {:?}", write_time);
    
    println!("\nüìñ –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è...");
    let start_time = Instant::now();
    
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤ –∫—ç—à)
    for i in 0..100 {
        let _data = manager.read_page_async(1, i).await?;
        
        if i % 20 == 0 {
            print!(".");
        }
    }
    
    let read_time = start_time.elapsed();
    println!("\n   ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ 100 —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ {:?}", read_time);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let stats = manager.get_statistics();
    println!("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ I/O:");
    println!("   - –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {}", stats.total_operations);
    println!("   - –û–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏: {}", stats.write_operations);
    println!("   - –û–ø–µ—Ä–∞—Ü–∏–π —á—Ç–µ–Ω–∏—è: {}", stats.read_operations);
    println!("   - –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {}", stats.cache_hits);
    println!("   - –ü—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞: {}", stats.cache_misses);
    println!("   - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π: {:.2}%", stats.cache_hit_ratio * 100.0);
    
    let (buffer_used, buffer_max, cache_size) = manager.get_buffer_info();
    println!("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞: {}/{}", buffer_used, buffer_max);
    println!("   - –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {} —Å—Ç—Ä–∞–Ω–∏—Ü", cache_size);
    
    Ok(())
}

async fn demonstrate_optimized_file_manager() -> Result<()> {
    println!("\nüöÄ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ ===");
    
    let temp_dir = tempfile::TempDir::new().unwrap();
    let manager = OptimizedFileManager::new(temp_dir.path())?;
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    let strategies = [
        ("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", ExtensionStrategy::Fixed),
        ("–õ–∏–Ω–µ–π–Ω–∞—è", ExtensionStrategy::Linear),
        ("–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è", ExtensionStrategy::Exponential),
        ("–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è", ExtensionStrategy::Adaptive),
    ];
    
    for (name, strategy) in &strategies {
        println!("\nüìÅ –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π: {}", name);
        
        let file_id = manager.create_database_file(
            &format!("{}_test.db", name.to_lowercase()),
            DatabaseFileType::Data,
            123,
            *strategy,
        ).await?;
        
        // –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let start_page = manager.allocate_pages(file_id, 50).await?;
        println!("   ‚úÖ –í—ã–¥–µ–ª–µ–Ω–æ 50 —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–∞—á–∏–Ω–∞—è —Å {}", start_page);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        let test_data = vec![42u8; BLOCK_SIZE];
        let start_time = Instant::now();
        
        for i in 0..50 {
            manager.write_page(file_id, start_page + i, &test_data).await?;
        }
        
        let write_time = start_time.elapsed();
        println!("   ‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ 50 —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ {:?}", write_time);
        
        // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        let start_time = Instant::now();
        
        for i in 0..50 {
            let _data = manager.read_page(file_id, start_page + i).await?;
        }
        
        let read_time = start_time.elapsed();
        println!("   ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ 50 —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ {:?}", read_time);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        if let Some(file_info) = manager.get_file_info(file_id).await {
            println!("   üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:");
            println!("      - –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {}", file_info.total_pages);
            println!("      - –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {}", file_info.used_pages);
            println!("      - –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {}", file_info.free_pages);
            println!("      - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {:.1}%", file_info.utilization_ratio * 100.0);
            println!("      - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {:.1}%", file_info.fragmentation_ratio * 100.0);
        }
    }
    
    Ok(())
}

async fn demonstrate_cache_performance_simple() -> Result<()> {
    println!("\nüîÑ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ ===");
    
    let temp_dir = tempfile::TempDir::new().unwrap();
    let manager = OptimizedFileManager::new(temp_dir.path())?;
    
    let file_id = manager.create_database_file(
        "cache_demo.db",
        DatabaseFileType::Data,
        456,
        ExtensionStrategy::Adaptive,
    ).await?;
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    let page_count = 200;
    let start_page = manager.allocate_pages(file_id, page_count).await?;
    
    println!("üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º {} —Å—Ç—Ä–∞–Ω–∏—Ü...", page_count);
    for i in 0..page_count {
        let data = vec![(i % 256) as u8; BLOCK_SIZE];
        manager.write_page(file_id, start_page + i as u64, &data).await?;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ—Å—Ç—É–ø–∞
    let access_patterns = [
        ("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π", (0..page_count).collect::<Vec<_>>()),
        ("–û–±—Ä–∞—Ç–Ω—ã–π", (0..page_count).rev().collect::<Vec<_>>()),
    ];
    
    for (pattern_name, pattern) in &access_patterns {
        println!("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: {}", pattern_name);
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        manager.clear_io_cache().await;
        
        let start_time = Instant::now();
        
        for &page_offset in pattern {
            let _data = manager.read_page(file_id, start_page + page_offset as u64).await?;
        }
        
        let access_time = start_time.elapsed();
        let stats = manager.get_io_statistics();
        
        println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞: {:?}", access_time);
        println!("   üìä –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {} ({:.1}%)", 
                 stats.cache_hits, stats.cache_hit_ratio * 100.0);
        println!("   üìä –ü—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞: {}", stats.cache_misses);
        
        let avg_time_per_op = access_time.as_nanos() / pattern.len() as u128;
        println!("   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é: {} –Ω—Å", avg_time_per_op);
    }
    
    Ok(())
}

async fn demonstrate_monitoring() -> Result<()> {
    println!("\nüìà === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===");
    
    let temp_dir = tempfile::TempDir::new().unwrap();
    let manager = OptimizedFileManager::new(temp_dir.path())?;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
    let mut file_ids = Vec::new();
    for i in 0..3 {
        let file_id = manager.create_database_file(
            &format!("monitor_test_{}.db", i),
            DatabaseFileType::Data,
            100 + i,
            ExtensionStrategy::Adaptive,
        ).await?;
        file_ids.push(file_id);
    }
    
    println!("üèÉ –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É...");
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—á—É—é –Ω–∞–≥—Ä—É–∑–∫—É
    let workload_start = Instant::now();
    
    for round in 0..5 {
        println!("   –†–∞—É–Ω–¥ {}/5", round + 1);
        
        for &file_id in &file_ids {
            // –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            let start_page = manager.allocate_pages(file_id, 20).await?;
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            for i in 0..20 {
                let data = vec![(round * 20 + i) as u8; BLOCK_SIZE];
                manager.write_page(file_id, start_page + i as u64, &data).await?;
            }
            
            // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ (—Å–º–µ—Å—å –Ω–æ–≤—ã—Ö –∏ —Å—Ç–∞—Ä—ã—Ö)
            for i in 0..30 {
                let page_id = if i < 20 {
                    start_page + i as u64
                } else {
                    // –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if start_page > 0 { start_page / 2 } else { 0 }
                };
                let _data = manager.read_page(file_id, page_id).await?;
            }
        }
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        if round % 2 == 0 {
            let extended_files = manager.maintenance_check().await?;
            if !extended_files.is_empty() {
                println!("   üîß –†–∞—Å—à–∏—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {}", extended_files.len());
            }
        }
        
        sleep(Duration::from_millis(100)).await;
    }
    
    let workload_time = workload_start.elapsed();
    println!("   ‚úÖ –ù–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {:?}", workload_time);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let stats = manager.get_combined_statistics().await;
    
    println!("\nüìä –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("   - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {}", stats.total_files);
    println!("   - –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {}", stats.total_pages);
    println!("   - –û–ø–µ—Ä–∞—Ü–∏–π —á—Ç–µ–Ω–∏—è: {}", stats.total_reads);
    println!("   - –û–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏: {}", stats.total_writes);
    println!("   - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {:.1}%", stats.cache_hit_ratio * 100.0);
    println!("   - –°—Ä–µ–¥–Ω—è—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è: {:.1}%", stats.average_utilization * 100.0);
    println!("   - –°—Ä–µ–¥–Ω—è—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è: {:.1}%", stats.average_fragmentation * 100.0);
    println!("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞: {:.1}%", stats.buffer_usage * 100.0);
    println!("   - –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {} —Å—Ç—Ä–∞–Ω–∏—Ü", stats.cache_usage);
    
    if stats.read_throughput > 0.0 {
        println!("   - –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è: {:.1} –ú–ë/—Å", 
                 stats.read_throughput / 1_000_000.0);
    }
    if stats.write_throughput > 0.0 {
        println!("   - –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏: {:.1} –ú–ë/—Å", 
                 stats.write_throughput / 1_000_000.0);
    }
    
    // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    let performance_score = stats.performance_score();
    println!("\n‚≠ê –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {:.1}% ({})", 
             performance_score * 100.0,
             match performance_score {
                 s if s >= 0.9 => "–û—Ç–ª–∏—á–Ω–æ",
                 s if s >= 0.8 => "–•–æ—Ä–æ—à–æ",
                 s if s >= 0.7 => "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ",
                 s if s >= 0.6 => "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è",
                 _ => "–¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
             });
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    let recommendations = stats.get_recommendations();
    println!("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:");
    for (i, recommendation) in recommendations.iter().enumerate() {
        println!("   {}. {}", i + 1, recommendation);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    println!("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤...");
    let validation_results = manager.validate_all().await?;
    
    let mut valid_files = 0;
    let mut invalid_files = 0;
    
    for (file_id, result) in validation_results {
        match result {
            Ok(_) => {
                valid_files += 1;
                println!("   ‚úÖ –§–∞–π–ª {} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω", file_id);
            }
            Err(e) => {
                invalid_files += 1;
                println!("   ‚ùå –§–∞–π–ª {} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {}", file_id, e);
            }
        }
    }
    
    println!("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:");
    println!("   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {}", valid_files);
    println!("   - –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {}", invalid_files);
    
    if invalid_files == 0 {
        println!("   üéâ –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏!");
    }
    
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_io_optimization_example() -> Result<()> {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ —Ç–µ—Å—Ç
        main().await
    }

    #[tokio::test]
    async fn test_performance_comparison() -> Result<()> {
        let temp_dir = tempfile::TempDir::new().unwrap();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä vs –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        let optimized_manager = OptimizedFileManager::new(temp_dir.path())?;
        
        let file_id = optimized_manager.create_database_file(
            "perf_test.db",
            DatabaseFileType::Data,
            999,
            ExtensionStrategy::Adaptive,
        ).await?;
        
        let data = vec![123u8; BLOCK_SIZE];
        let operations = 100;
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        let start_time = Instant::now();
        
        let start_page = optimized_manager.allocate_pages(file_id, operations).await?;
        
        for i in 0..operations {
            optimized_manager.write_page(file_id, start_page + i as u64, &data).await?;
        }
        
        for i in 0..operations {
            let _read_data = optimized_manager.read_page(file_id, start_page + i as u64).await?;
        }
        
        let optimized_time = start_time.elapsed();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let stats = optimized_manager.get_combined_statistics().await;
        
        println!("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä:");
        println!("  –í—Ä–µ–º—è: {:?}", optimized_time);
        println!("  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {:.1}%", stats.cache_hit_ratio * 100.0);
        println!("  –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {:.1}%", stats.performance_score() * 100.0);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞—è
        assert!(stats.performance_score() > 0.5, "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è");
        
        Ok(())
    }
}
