//! –¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Row

use crate::storage::row::{Row, RowHeader, RowStatus};
use crate::common::types::{PageId, ColumnValue};

#[test]
fn test_row_creation() {
    let row = Row::new(1, PageId(10), 100);
    
    assert_eq!(row.get_id(), 1);
    assert_eq!(row.get_page_id(), PageId(10));
    assert_eq!(row.get_offset(), 100);
    assert_eq!(row.get_status(), RowStatus::Active);
    assert!(row.is_dirty());
}

#[test]
fn test_row_header() {
    let row = Row::new(42, PageId(5), 200);
    let header = row.get_header();
    
    assert_eq!(header.row_id, 42);
    assert_eq!(header.page_id, PageId(5));
    assert_eq!(header.offset, 200);
    assert_eq!(header.status, RowStatus::Active);
}

#[test]
fn test_row_data_operations() {
    let mut row = Row::new(1, PageId(1), 0);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
    row.add_column_value(ColumnValue::Integer(42));
    row.add_column_value(ColumnValue::Text("Hello".to_string()));
    row.add_column_value(ColumnValue::Boolean(true));
    
    assert_eq!(row.get_column_count(), 3);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    assert_eq!(row.get_column_value(0), Some(&ColumnValue::Integer(42)));
    assert_eq!(row.get_column_value(1), Some(&ColumnValue::Text("Hello".to_string())));
    assert_eq!(row.get_column_value(2), Some(&ColumnValue::Boolean(true)));
    assert_eq!(row.get_column_value(3), None); // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–ª–æ–Ω–∫–∞
}

#[test]
fn test_row_update_column() {
    let mut row = Row::new(1, PageId(1), 0);
    
    row.add_column_value(ColumnValue::Integer(10));
    row.add_column_value(ColumnValue::Text("Old".to_string()));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    let result1 = row.update_column_value(0, ColumnValue::Integer(20));
    let result2 = row.update_column_value(1, ColumnValue::Text("New".to_string()));
    
    assert!(result1.is_ok());
    assert!(result2.is_ok());
    
    assert_eq!(row.get_column_value(0), Some(&ColumnValue::Integer(20)));
    assert_eq!(row.get_column_value(1), Some(&ColumnValue::Text("New".to_string())));
}

#[test]
fn test_row_update_invalid_column() {
    let mut row = Row::new(1, PageId(1), 0);
    row.add_column_value(ColumnValue::Integer(1));
    
    // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É
    let result = row.update_column_value(5, ColumnValue::Integer(2));
    assert!(result.is_err());
}

#[test]
fn test_row_status_changes() {
    let mut row = Row::new(1, PageId(1), 0);
    
    assert_eq!(row.get_status(), RowStatus::Active);
    
    // –ü–æ–º–µ—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é
    row.mark_deleted();
    assert_eq!(row.get_status(), RowStatus::Deleted);
    assert!(row.is_dirty());
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
    row.mark_active();
    assert_eq!(row.get_status(), RowStatus::Active);
    assert!(row.is_dirty());
}

#[test]
fn test_row_serialization() {
    let mut row = Row::new(42, PageId(10), 500);
    
    row.add_column_value(ColumnValue::Integer(123));
    row.add_column_value(ColumnValue::Text("Serialization test".to_string()));
    row.add_column_value(ColumnValue::Float(3.14));
    row.add_column_value(ColumnValue::Boolean(false));
    
    // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É
    let serialized = row.serialize();
    assert!(!serialized.is_empty());
    
    // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É
    let deserialized = Row::deserialize(&serialized);
    assert!(deserialized.is_ok());
    
    let new_row = deserialized.unwrap();
    assert_eq!(new_row.get_id(), 42);
    assert_eq!(new_row.get_page_id(), PageId(10));
    assert_eq!(new_row.get_offset(), 500);
    assert_eq!(new_row.get_column_count(), 4);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    assert_eq!(new_row.get_column_value(0), Some(&ColumnValue::Integer(123)));
    assert_eq!(new_row.get_column_value(1), Some(&ColumnValue::Text("Serialization test".to_string())));
    assert_eq!(new_row.get_column_value(2), Some(&ColumnValue::Float(3.14)));
    assert_eq!(new_row.get_column_value(3), Some(&ColumnValue::Boolean(false)));
}

#[test]
fn test_row_different_data_types() {
    let mut row = Row::new(1, PageId(1), 0);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    row.add_column_value(ColumnValue::Integer(i64::MAX));
    row.add_column_value(ColumnValue::Integer(i64::MIN));
    row.add_column_value(ColumnValue::Float(f64::MAX));
    row.add_column_value(ColumnValue::Float(f64::MIN));
    row.add_column_value(ColumnValue::Text("".to_string())); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    row.add_column_value(ColumnValue::Text("ü¶Ä Rust is awesome! üöÄ".to_string())); // Unicode
    row.add_column_value(ColumnValue::Boolean(true));
    row.add_column_value(ColumnValue::Boolean(false));
    row.add_column_value(ColumnValue::Null);
    
    assert_eq!(row.get_column_count(), 9);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
    assert_eq!(row.get_column_value(0), Some(&ColumnValue::Integer(i64::MAX)));
    assert_eq!(row.get_column_value(1), Some(&ColumnValue::Integer(i64::MIN)));
    assert_eq!(row.get_column_value(2), Some(&ColumnValue::Float(f64::MAX)));
    assert_eq!(row.get_column_value(3), Some(&ColumnValue::Float(f64::MIN)));
    assert_eq!(row.get_column_value(4), Some(&ColumnValue::Text("".to_string())));
    assert_eq!(row.get_column_value(5), Some(&ColumnValue::Text("ü¶Ä Rust is awesome! üöÄ".to_string())));
    assert_eq!(row.get_column_value(6), Some(&ColumnValue::Boolean(true)));
    assert_eq!(row.get_column_value(7), Some(&ColumnValue::Boolean(false)));
    assert_eq!(row.get_column_value(8), Some(&ColumnValue::Null));
}

#[test]
fn test_row_large_data() {
    let mut row = Row::new(1, PageId(1), 0);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à—É—é —Å—Ç—Ä–æ–∫—É
    let large_text = "A".repeat(100000); // 100KB —Ç–µ–∫—Å—Ç–∞
    row.add_column_value(ColumnValue::Text(large_text.clone()));
    
    assert_eq!(row.get_column_count(), 1);
    assert_eq!(row.get_column_value(0), Some(&ColumnValue::Text(large_text)));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
    let size = row.calculate_size();
    assert!(size > 100000); // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑-–∑–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
}

#[test]
fn test_row_dirty_flag() {
    let mut row = Row::new(1, PageId(1), 0);
    assert!(row.is_dirty()); // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≥—Ä—è–∑–Ω–∞—è
    
    row.mark_clean();
    assert!(!row.is_dirty());
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ–ª–∂–Ω–æ –ø–æ–º–µ—á–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –≥—Ä—è–∑–Ω—É—é
    row.add_column_value(ColumnValue::Integer(1));
    assert!(row.is_dirty());
    
    row.mark_clean();
    assert!(!row.is_dirty());
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ–ª–∂–Ω–æ –ø–æ–º–µ—á–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –≥—Ä—è–∑–Ω—É—é
    row.update_column_value(0, ColumnValue::Integer(2)).unwrap();
    assert!(row.is_dirty());
    
    row.mark_clean();
    assert!(!row.is_dirty());
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–Ω–æ –ø–æ–º–µ—á–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –≥—Ä—è–∑–Ω—É—é
    row.mark_deleted();
    assert!(row.is_dirty());
}

#[test]
fn test_row_clone() {
    let mut original = Row::new(1, PageId(5), 100);
    original.add_column_value(ColumnValue::Integer(42));
    original.add_column_value(ColumnValue::Text("Original".to_string()));
    
    let cloned = original.clone();
    
    assert_eq!(cloned.get_id(), original.get_id());
    assert_eq!(cloned.get_page_id(), original.get_page_id());
    assert_eq!(cloned.get_offset(), original.get_offset());
    assert_eq!(cloned.get_status(), original.get_status());
    assert_eq!(cloned.get_column_count(), original.get_column_count());
    assert_eq!(cloned.get_column_value(0), original.get_column_value(0));
    assert_eq!(cloned.get_column_value(1), original.get_column_value(1));
}

#[test]
fn test_row_equality() {
    let mut row1 = Row::new(1, PageId(1), 0);
    row1.add_column_value(ColumnValue::Integer(42));
    
    let mut row2 = Row::new(1, PageId(1), 0);
    row2.add_column_value(ColumnValue::Integer(42));
    
    let mut row3 = Row::new(2, PageId(1), 0); // –î—Ä—É–≥–æ–π ID
    row3.add_column_value(ColumnValue::Integer(42));
    
    assert_eq!(row1, row2);
    assert_ne!(row1, row3);
}

#[test]
fn test_row_move_to_different_page() {
    let mut row = Row::new(1, PageId(1), 100);
    row.add_column_value(ColumnValue::Text("Moving row".to_string()));
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    row.set_page_id(PageId(2));
    row.set_offset(200);
    
    assert_eq!(row.get_page_id(), PageId(2));
    assert_eq!(row.get_offset(), 200);
    assert!(row.is_dirty()); // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–º–µ—á–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –≥—Ä—è–∑–Ω—É—é
    
    // –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏
    assert_eq!(row.get_column_value(0), Some(&ColumnValue::Text("Moving row".to_string())));
}

#[test]
fn test_row_status_enum() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Å—Ç—Ä–æ–∫
    assert_eq!(RowStatus::Active as u8, 0);
    assert_eq!(RowStatus::Deleted as u8, 1);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
    let statuses = vec![RowStatus::Active, RowStatus::Deleted];
    
    for status in statuses {
        let serialized = bincode::serialize(&status).unwrap();
        let deserialized: RowStatus = bincode::deserialize(&serialized).unwrap();
        assert_eq!(status, deserialized);
    }
}

#[test]
fn test_row_boundary_conditions() {
    // –¢–µ—Å—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    let mut row = Row::new(u32::MAX, PageId(u64::MAX), usize::MAX);
    
    assert_eq!(row.get_id(), u32::MAX);
    assert_eq!(row.get_page_id(), PageId(u64::MAX));
    assert_eq!(row.get_offset(), usize::MAX);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ø–∞–º—è—Ç—å—é)
    for i in 0..1000 {
        row.add_column_value(ColumnValue::Integer(i));
    }
    
    assert_eq!(row.get_column_count(), 1000);
}

#[test]
fn test_row_memory_efficiency() {
    use std::mem;
    
    let row = Row::new(1, PageId(1), 0);
    let size = mem::size_of_val(&row);
    
    // –°—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –ø–∞–º—è—Ç–∏
    assert!(size < 1024); // –ú–µ–Ω–µ–µ 1KB –¥–ª—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
}

#[test]
fn test_row_persistence() {
    use tempfile::TempDir;
    use std::fs::File;
    use std::io::{Write, Read};
    
    let temp_dir = TempDir::new().unwrap();
    let file_path = temp_dir.path().join("test_row.dat");
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
    let mut original_row = Row::new(42, PageId(10), 500);
    original_row.add_column_value(ColumnValue::Integer(123));
    original_row.add_column_value(ColumnValue::Text("Persistent row".to_string()));
    original_row.mark_deleted(); // –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    {
        let mut file = File::create(&file_path).unwrap();
        let serialized = original_row.serialize();
        file.write_all(&serialized).unwrap();
    }
    
    // –ß–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    {
        let mut file = File::open(&file_path).unwrap();
        let mut buffer = Vec::new();
        file.read_to_end(&mut buffer).unwrap();
        
        let loaded_row = Row::deserialize(&buffer).unwrap();
        
        assert_eq!(loaded_row.get_id(), 42);
        assert_eq!(loaded_row.get_page_id(), PageId(10));
        assert_eq!(loaded_row.get_offset(), 500);
        assert_eq!(loaded_row.get_status(), RowStatus::Deleted);
        assert_eq!(loaded_row.get_column_count(), 2);
        assert_eq!(loaded_row.get_column_value(0), Some(&ColumnValue::Integer(123)));
        assert_eq!(loaded_row.get_column_value(1), Some(&ColumnValue::Text("Persistent row".to_string())));
    }
}

#[test]
fn test_row_concurrent_access_simulation() {
    use std::sync::{Arc, Mutex};
    use std::thread;
    
    let row = Arc::new(Mutex::new(Row::new(1, PageId(1), 0)));
    let mut handles = vec![];
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
    for i in 0..10 {
        let row_clone = Arc::clone(&row);
        let handle = thread::spawn(move || {
            let mut row = row_clone.lock().unwrap();
            row.add_column_value(ColumnValue::Integer(i));
        });
        handles.push(handle);
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for handle in handles {
        handle.join().unwrap();
    }
    
    let final_row = row.lock().unwrap();
    assert_eq!(final_row.get_column_count(), 10);
}

#[test]
fn test_row_validation() {
    let mut row = Row::new(1, PageId(1), 0);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    row.add_column_value(ColumnValue::Integer(42));
    row.add_column_value(ColumnValue::Text("Valid".to_string()));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–∞
    assert!(row.validate().is_ok());
    
    // –ü–æ–º–µ—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é
    row.mark_deleted();
    
    // –°—Ç—Ä–æ–∫–∞ –≤—Å–µ –µ—â–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–∞
    assert!(row.validate().is_ok());
}
