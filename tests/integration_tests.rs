//! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è RustBD
//! 
//! –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç
//! –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã.

mod integration;

use integration::*;
use rustdb::common::{Error, Result, types::*};
use rustdb::core::{IsolationLevel, transaction::TransactionId};
use std::time::Duration;

/// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
#[test]
fn run_all_integration_tests() -> Result<()> {
    println!("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...");
    
    // –¢–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    println!("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤...");
    full_cycle_tests::test_simple_select_cycle()?;
    full_cycle_tests::test_insert_cycle()?;
    full_cycle_tests::test_update_cycle()?;
    full_cycle_tests::test_delete_cycle()?;
    full_cycle_tests::test_complex_query_cycle()?;
    full_cycle_tests::test_transactional_query_cycle()?;
    full_cycle_tests::test_transaction_rollback_cycle()?;
    full_cycle_tests::test_error_handling_cycle()?;
    full_cycle_tests::test_simple_query_performance()?;
    println!("‚úÖ –¢–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
    
    // –¢–µ—Å—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    println!("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...");
    transaction_tests::test_basic_transaction_functionality()?;
    transaction_tests::test_transaction_rollback()?;
    transaction_tests::test_read_committed_isolation()?;
    transaction_tests::test_repeatable_read_isolation()?;
    transaction_tests::test_locking_behavior()?;
    transaction_tests::test_deadlock_detection()?;
    transaction_tests::test_crash_recovery()?;
    transaction_tests::test_long_running_transaction()?;
    transaction_tests::test_multiple_concurrent_transactions()?;
    println!("‚úÖ –¢–µ—Å—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
    
    // Benchmark —Ç–µ—Å—Ç—ã
    println!("‚ö° –ó–∞–ø—É—Å–∫ benchmark —Ç–µ—Å—Ç–æ–≤...");
    benchmark_tests::benchmark_simple_select()?;
    benchmark_tests::benchmark_insert_operations()?;
    benchmark_tests::benchmark_update_operations()?;
    benchmark_tests::benchmark_delete_operations()?;
    benchmark_tests::benchmark_join_operations()?;
    benchmark_tests::benchmark_transaction_operations()?;
    benchmark_tests::benchmark_index_operations()?;
    benchmark_tests::benchmark_buffer_pool()?;
    benchmark_tests::benchmark_logging_operations()?;
    benchmark_tests::benchmark_checkpoint_operations()?;
    benchmark_tests::benchmark_mixed_operations()?;
    println!("‚úÖ Benchmark —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
    
    // Stress —Ç–µ—Å—Ç—ã
    println!("üí™ –ó–∞–ø—É—Å–∫ stress —Ç–µ—Å—Ç–æ–≤...");
    stress_tests::stress_test_concurrent_connections()?;
    stress_tests::stress_test_long_transactions()?;
    stress_tests::stress_test_locking()?;
    stress_tests::stress_test_memory_usage()?;
    stress_tests::stress_test_checkpoint_operations()?;
    stress_tests::stress_test_recovery()?;
    stress_tests::stress_test_performance_under_load()?;
    stress_tests::stress_test_large_dataset()?;
    println!("‚úÖ Stress —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
    
    println!("üéâ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
    
    Ok(())
}

/// –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
#[tokio::test]
async fn test_system_integration() -> Result<()> {
    println!("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...");
    
    let mut ctx = IntegrationTestContext::new().await?;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    ctx.create_test_table("integration_test").await?;
    println!("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–±–æ—Ç–∞–µ—Ç");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
    ctx.insert_test_data("integration_test", 100).await?;
    println!("‚úÖ –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
    let results = ctx.execute_sql("SELECT * FROM integration_test").await?;
    let count = results.len();
    
    assert_eq!(count, 100, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 100 –∑–∞–ø–∏—Å–µ–π");
    println!("‚úÖ –ó–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let tx_id = ctx.transaction_manager.begin_transaction(IsolationLevel::ReadCommitted, false)?;
    ctx.execute_sql("INSERT INTO integration_test (id, name, age, email) VALUES (101, 'TestUser', 30, 'test@example.com')").await?;
    ctx.transaction_manager.commit_transaction(tx_id)?;
    println!("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º checkpoint
    ctx.checkpoint_manager.create_checkpoint().await?;
    println!("‚úÖ Checkpoint —Ä–∞–±–æ—Ç–∞–µ—Ç");
    
    println!("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
    
    Ok(())
}

/// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
#[tokio::test]
async fn test_system_performance() -> Result<()> {
    println!("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...");
    
    let mut ctx = IntegrationTestContext::new().await?;
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    ctx.create_test_table("perf_test").await?;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏
    let start_time = std::time::Instant::now();
    ctx.insert_test_data("perf_test", 1000).await?;
    let insert_time = start_time.elapsed();
    
    println!("–í—Å—Ç–∞–≤–∫–∞ 1000 –∑–∞–ø–∏—Å–µ–π: {:?}", insert_time);
    assert!(insert_time < Duration::from_secs(10), "–í—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
    let query_start = std::time::Instant::now();
    for _ in 0..100 {
        ctx.execute_sql("SELECT * FROM perf_test").await?;
    }
    let query_time = query_start.elapsed();
    
    println!("100 –∑–∞–ø—Ä–æ—Å–æ–≤: {:?}", query_time);
    assert!(query_time < Duration::from_secs(5), "–ó–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º–∏");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    let update_start = std::time::Instant::now();
    for _ in 1..=100 {
        ctx.execute_sql("UPDATE perf_test SET age = 99").await?;
    }
    let update_time = update_start.elapsed();
    
    println!("100 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {:?}", update_time);
    assert!(update_time < Duration::from_secs(5), "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º–∏");
    
    println!("üéâ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!");
    
    Ok(())
}

/// –¢–µ—Å—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
#[tokio::test]
async fn test_system_reliability() -> Result<()> {
    println!("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...");
    
    let mut ctx = IntegrationTestContext::new().await?;
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    ctx.create_test_table("reliability_test").await?;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π
    for i in 1..=1000 {
        ctx.execute_sql(&format!(
            "INSERT INTO reliability_test (id, name, age, email) VALUES ({}, 'User{}', {}, 'user{}@example.com')",
            i, i, 20 + (i % 50), i
        )).await?;
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º checkpoint
        if i % 100 == 0 {
            ctx.checkpoint_manager.create_checkpoint().await?;
        }
    }
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–±–æ–π
    let mut new_ctx = IntegrationTestContext::new().await?;
    
    // –î–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –º—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    new_ctx.inserted_records.insert("reliability_test".to_string(), 1000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    let results = new_ctx.execute_sql("SELECT * FROM reliability_test").await?;
    let count = results.len();
    
    assert_eq!(count, 1000, "–î–æ–ª–∂–Ω—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –≤—Å–µ 1000 –∑–∞–ø–∏—Å–µ–π");
    
    println!("üéâ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–¥–µ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–±–æ–µ–≤!");
    
    Ok(())
}