//! –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//!
//! –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WAL

use crate::common::{Error, Result};
use crate::core::transaction::TransactionId;
use crate::logging::log_record::{LogRecord, LogRecordType, LogSequenceNumber};
use crate::logging::wal::WriteAheadLog;
use std::collections::{HashMap, HashSet, BTreeMap};
use std::path::{Path, PathBuf};
use std::sync::{Arc, Mutex};
use std::time::{Instant, Duration};

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum RecoveryTransactionState {
    /// –ê–∫—Ç–∏–≤–Ω–∞
    Active,
    /// –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ (2PC)
    Prepared,
    /// –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞
    Committed,
    /// –û—Ç–∫–∞—á–µ–Ω–∞
    Aborted,
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
#[derive(Debug, Clone)]
pub struct RecoveryTransactionInfo {
    /// ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    pub transaction_id: TransactionId,
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ
    pub state: RecoveryTransactionState,
    /// –ü–µ—Ä–≤—ã–π LSN
    pub first_lsn: LogSequenceNumber,
    /// –ü–æ—Å–ª–µ–¥–Ω–∏–π LSN
    pub last_lsn: LogSequenceNumber,
    /// –û–ø–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    pub operations: Vec<LogRecord>,
    /// –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pub dirty_pages: HashSet<(u32, u64)>, // (file_id, page_id)
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤
#[derive(Debug, Clone)]
pub struct AnalysisResult {
    /// –ü–æ—Å–ª–µ–¥–Ω–∏–π LSN
    pub last_lsn: LogSequenceNumber,
    /// –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
    pub checkpoint_lsn: Option<LogSequenceNumber>,
    /// –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    pub active_transactions: HashMap<TransactionId, RecoveryTransactionInfo>,
    /// –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    pub committed_transactions: HashMap<TransactionId, RecoveryTransactionInfo>,
    /// –û—Ç–∫–∞—á–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    pub aborted_transactions: HashMap<TransactionId, RecoveryTransactionInfo>,
    /// –í—Å–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pub dirty_pages: HashSet<(u32, u64)>,
    /// –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π
    pub total_records: u64,
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
#[derive(Debug, Clone, Default)]
pub struct RecoveryStatistics {
    /// –í—Å–µ–≥–æ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
    pub log_files_processed: u32,
    /// –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π
    pub total_records: u64,
    /// –û–ø–µ—Ä–∞—Ü–∏–π REDO
    pub redo_operations: u64,
    /// –û–ø–µ—Ä–∞—Ü–∏–π UNDO
    pub undo_operations: u64,
    /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    pub recovered_transactions: u64,
    /// –û—Ç–∫–∞—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    pub rolled_back_transactions: u64,
    /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    pub recovered_pages: u64,
    /// –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–º—Å)
    pub recovery_time_ms: u64,
    /// –û—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    pub recovery_errors: u64,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
#[derive(Debug, Clone)]
pub struct RecoveryConfig {
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    pub max_recovery_time: Duration,
    /// –í–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    pub enable_parallel: bool,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
    pub num_threads: usize,
    /// –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    pub create_backup: bool,
    /// –í–∫–ª—é—á–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    pub enable_validation: bool,
}

impl Default for RecoveryConfig {
    fn default() -> Self {
        Self {
            max_recovery_time: Duration::from_secs(300),
            enable_parallel: true,
            num_threads: 4,
            create_backup: false,
            enable_validation: true,
        }
    }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
pub struct AdvancedRecoveryManager {
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config: RecoveryConfig,
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    statistics: Arc<Mutex<RecoveryStatistics>>,
    /// WAL
    wal: Option<Arc<WriteAheadLog>>,
}

impl AdvancedRecoveryManager {
    /// –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    pub fn new(config: RecoveryConfig) -> Self {
        Self {
            config,
            statistics: Arc::new(Mutex::new(RecoveryStatistics::default())),
            wal: None,
        }
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WAL
    pub fn set_wal(&mut self, wal: Arc<WriteAheadLog>) {
        self.wal = Some(wal);
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    pub fn needs_recovery(&self, log_directory: &Path) -> bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if !log_directory.exists() {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
        if let Ok(entries) = std::fs::read_dir(log_directory) {
            for entry in entries.flatten() {
                if entry.path().extension().and_then(|s| s.to_str()) == Some("log") {
                    return true;
                }
            }
        }
        
        false
    }
    
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    pub fn recover(&mut self, log_directory: &Path) -> Result<RecoveryStatistics> {
        let start_time = Instant::now();
        
        println!("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
        
        // –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
        println!("üìä –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤");
        let analysis_result = self.analyze_logs(log_directory)?;
        
        println!("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} –ª–æ–≥-–∑–∞–ø–∏—Å–µ–π", analysis_result.total_records);
        println!("   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}", analysis_result.active_transactions.len());
        println!("   ‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {}", analysis_result.committed_transactions.len());
        
        // –≠—Ç–∞–ø 2: REDO
        println!("üîÑ –≠—Ç–∞–ø 2: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (REDO)");
        self.perform_redo(&analysis_result)?;
        
        // –≠—Ç–∞–ø 3: UNDO
        println!("‚Ü©Ô∏è  –≠—Ç–∞–ø 3: –û—Ç–∫–∞—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (UNDO)");
        self.perform_undo(&analysis_result)?;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        {
            let mut stats = self.statistics.lock().unwrap();
            stats.recovery_time_ms = start_time.elapsed().as_millis() as u64;
            stats.total_records = analysis_result.total_records;
        }
        
        println!("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {} –º—Å", start_time.elapsed().as_millis());
        
        Ok(self.get_statistics())
    }
    
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥-—Ñ–∞–π–ª—ã
    fn analyze_logs(&mut self, log_directory: &Path) -> Result<AnalysisResult> {
        let mut result = AnalysisResult {
            last_lsn: 0,
            checkpoint_lsn: None,
            active_transactions: HashMap::new(),
            committed_transactions: HashMap::new(),
            aborted_transactions: HashMap::new(),
            dirty_pages: HashSet::new(),
            total_records: 0,
        };
        
        // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª—ã
        let log_files = self.get_log_files(log_directory)?;
        
        {
            let mut stats = self.statistics.lock().unwrap();
            stats.log_files_processed = log_files.len() as u32;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for file_path in log_files {
            println!("   üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {:?}", file_path.file_name());
            
            let records = self.read_log_file(&file_path)?;
            
            for record in records {
                self.process_record(&mut result, record)?;
                result.total_records += 1;
            }
        }
        
        println!("   üìç –ü–æ—Å–ª–µ–¥–Ω–∏–π LSN: {}", result.last_lsn);
        
        Ok(result)
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
    fn get_log_files(&self, log_directory: &Path) -> Result<Vec<PathBuf>> {
        let mut files = Vec::new();
        
        if !log_directory.exists() {
            return Ok(files);
        }
        
        let entries = std::fs::read_dir(log_directory)
            .map_err(|e| Error::internal(format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {}", e)))?;
        
        for entry in entries.flatten() {
            let path = entry.path();
            if path.extension().and_then(|s| s.to_str()) == Some("log") {
                files.push(path);
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç —Å timestamp)
        files.sort();
        
        Ok(files)
    }
    
    /// –ß–∏—Ç–∞–µ—Ç –ª–æ–≥-–∑–∞–ø–∏—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞
    fn read_log_file(&self, file_path: &Path) -> Result<Vec<LogRecord>> {
        // –°–∏–º—É–ª—è—Ü–∏—è —á—Ç–µ–Ω–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Ç–∞–µ–º –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∏–∑ —Ñ–∞–π–ª–∞
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º WAL
        Ok(Vec::new())
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –ª–æ–≥-–∑–∞–ø–∏—Å—å
    fn process_record(&mut self, result: &mut AnalysisResult, record: LogRecord) -> Result<()> {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π LSN
        if record.lsn > result.last_lsn {
            result.last_lsn = record.lsn;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ transaction_id
        let tx_id = match record.transaction_id {
            Some(id) => TransactionId::new(id),
            None => return Ok(()), // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        };
        
        match record.record_type {
            LogRecordType::TransactionBegin => {
                // –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                let tx_info = RecoveryTransactionInfo {
                    transaction_id: tx_id,
                    state: RecoveryTransactionState::Active,
                    first_lsn: record.lsn,
                    last_lsn: record.lsn,
                    operations: vec![record.clone()],
                    dirty_pages: HashSet::new(),
                };
                result.active_transactions.insert(tx_id, tx_info);
            }
            
            LogRecordType::TransactionCommit => {
                // –§–∏–∫—Å–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                if let Some(mut tx_info) = result.active_transactions.remove(&tx_id) {
                    tx_info.state = RecoveryTransactionState::Committed;
                    tx_info.last_lsn = record.lsn;
                    tx_info.operations.push(record);
                    result.committed_transactions.insert(tx_info.transaction_id, tx_info);
                }
            }
            
            LogRecordType::TransactionAbort => {
                // –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                if let Some(mut tx_info) = result.active_transactions.remove(&tx_id) {
                    tx_info.state = RecoveryTransactionState::Aborted;
                    tx_info.last_lsn = record.lsn;
                    result.aborted_transactions.insert(tx_info.transaction_id, tx_info);
                }
            }
            
            LogRecordType::DataInsert | LogRecordType::DataUpdate | LogRecordType::DataDelete => {
                // –û–ø–µ—Ä–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
                if let Some(tx_info) = result.active_transactions.get_mut(&tx_id) {
                    tx_info.last_lsn = record.lsn;
                    tx_info.operations.push(record.clone());
                }
            }
            
            LogRecordType::Checkpoint => {
                // –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
                result.checkpoint_lsn = Some(record.lsn);
            }
            
            _ => {
                // –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∑–∞–ø–∏—Å–µ–π
            }
        }
        
        Ok(())
    }
    
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ REDO
    fn perform_redo(&mut self, analysis: &AnalysisResult) -> Result<()> {
        let mut redo_count = 0;
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        let mut operations: BTreeMap<LogSequenceNumber, &LogRecord> = BTreeMap::new();
        
        for tx_info in analysis.committed_transactions.values() {
            for op in &tx_info.operations {
                if matches!(
                    op.record_type,
                    LogRecordType::DataInsert | LogRecordType::DataUpdate | LogRecordType::DataDelete
                ) {
                    operations.insert(op.lsn, op);
                }
            }
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ LSN
        for (lsn, operation) in operations {
            self.apply_redo_operation(operation)?;
            redo_count += 1;
            
            if redo_count % 100 == 0 {
                println!("   üìù REDO: {} –æ–ø–µ—Ä–∞—Ü–∏–π", redo_count);
            }
        }
        
        {
            let mut stats = self.statistics.lock().unwrap();
            stats.redo_operations = redo_count;
            stats.recovered_transactions = analysis.committed_transactions.len() as u64;
            stats.recovered_pages = analysis.dirty_pages.len() as u64;
        }
        
        println!("   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {} –æ–ø–µ—Ä–∞—Ü–∏–π REDO", redo_count);
        
        Ok(())
    }
    
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ UNDO
    fn perform_undo(&mut self, analysis: &AnalysisResult) -> Result<()> {
        let mut undo_count = 0;
        
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        for tx_info in analysis.active_transactions.values() {
            println!("   ‚Ü©Ô∏è  –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é TXN{}", tx_info.transaction_id);
            
            // –û–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for operation in tx_info.operations.iter().rev() {
                if matches!(
                    operation.record_type,
                    LogRecordType::DataInsert | LogRecordType::DataUpdate | LogRecordType::DataDelete
                ) {
                    self.apply_undo_operation(operation)?;
                    undo_count += 1;
                }
            }
        }
        
        {
            let mut stats = self.statistics.lock().unwrap();
            stats.undo_operations = undo_count;
            stats.rolled_back_transactions = analysis.active_transactions.len() as u64;
        }
        
        println!("   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {} –æ–ø–µ—Ä–∞—Ü–∏–π UNDO", undo_count);
        
        Ok(())
    }
    
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é REDO
    fn apply_redo_operation(&self, operation: &LogRecord) -> Result<()> {
        match operation.record_type {
            LogRecordType::DataInsert => {
                // –ü–æ–≤—Ç–æ—Ä—è–µ–º INSERT
                // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å storage –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
                Ok(())
            }
            LogRecordType::DataUpdate => {
                // –ü–æ–≤—Ç–æ—Ä—è–µ–º UPDATE
                // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å storage –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
                Ok(())
            }
            LogRecordType::DataDelete => {
                // –ü–æ–≤—Ç–æ—Ä—è–µ–º DELETE
                // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å storage –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
                Ok(())
            }
            _ => Ok(()),
        }
    }
    
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é UNDO
    fn apply_undo_operation(&self, operation: &LogRecord) -> Result<()> {
        match operation.record_type {
            LogRecordType::DataInsert => {
                // –î–ª—è INSERT –¥–µ–ª–∞–µ–º DELETE
                // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å storage
                Ok(())
            }
            LogRecordType::DataUpdate => {
                // –î–ª—è UPDATE –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å storage
                Ok(())
            }
            LogRecordType::DataDelete => {
                // –î–ª—è DELETE –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å storage
                Ok(())
            }
            _ => Ok(()),
        }
    }
    
    /// –°–æ–∑–¥–∞—ë—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    pub fn create_backup(&self, source_dir: &Path, backup_dir: &Path) -> Result<()> {
        if !self.config.create_backup {
            return Ok(());
        }
        
        println!("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...");
        
        // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è backup
        std::fs::create_dir_all(backup_dir)
            .map_err(|e| Error::internal(format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é backup: {}", e)))?;
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        let mut copied_files = 0;
        
        if let Ok(entries) = std::fs::read_dir(source_dir) {
            for entry in entries.flatten() {
                let path = entry.path();
                if path.is_file() {
                    let file_name = path.file_name().unwrap();
                    let dest_path = backup_dir.join(file_name);
                    
                    std::fs::copy(&path, &dest_path)
                        .map_err(|e| Error::internal(format!("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e)))?;
                    
                    copied_files += 1;
                }
            }
        }
        
        println!("   ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {} —Ñ–∞–π–ª–æ–≤", copied_files);
        
        Ok(())
    }
    
    /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    pub fn validate_recovery(&self, analysis: &AnalysisResult) -> Result<()> {
        if !self.config.enable_validation {
            return Ok(());
        }
        
        println!("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–∫–∞—á–µ–Ω—ã
        if !analysis.active_transactions.is_empty() {
            return Err(Error::internal(
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
            ));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
        println!("   ‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–∫–∞—á–µ–Ω—ã");
        println!("   ‚úÖ –í—Å–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        
        Ok(())
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    pub fn get_statistics(&self) -> RecoveryStatistics {
        self.statistics.lock().unwrap().clone()
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    pub fn config(&self) -> &RecoveryConfig {
        &self.config
    }
}

impl Default for AdvancedRecoveryManager {
    fn default() -> Self {
        Self::new(RecoveryConfig::default())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_recovery_manager_creation() {
        let manager = AdvancedRecoveryManager::default();
        let stats = manager.get_statistics();
        
        assert_eq!(stats.redo_operations, 0);
        assert_eq!(stats.undo_operations, 0);
    }
    
    #[test]
    fn test_needs_recovery() {
        let manager = AdvancedRecoveryManager::default();
        let non_existent_path = Path::new("./non_existent_logs");
        
        assert!(!manager.needs_recovery(non_existent_path));
    }
    
    #[test]
    fn test_recovery_config() {
        let config = RecoveryConfig {
            max_recovery_time: Duration::from_secs(60),
            enable_parallel: false,
            num_threads: 2,
            create_backup: true,
            enable_validation: true,
        };
        
        let manager = AdvancedRecoveryManager::new(config.clone());
        assert_eq!(manager.config.num_threads, 2);
        assert!(manager.config.create_backup);
    }
    
    #[test]
    fn test_analysis_result_creation() {
        let result = AnalysisResult {
            last_lsn: 100,
            checkpoint_lsn: Some(50),
            active_transactions: HashMap::new(),
            committed_transactions: HashMap::new(),
            aborted_transactions: HashMap::new(),
            dirty_pages: HashSet::new(),
            total_records: 100,
        };
        
        assert_eq!(result.last_lsn, 100);
        assert_eq!(result.checkpoint_lsn, Some(50));
        assert_eq!(result.total_records, 100);
    }
    
    #[test]
    fn test_transaction_states() {
        assert_eq!(RecoveryTransactionState::Active, RecoveryTransactionState::Active);
        assert_ne!(RecoveryTransactionState::Active, RecoveryTransactionState::Committed);
    }
}

