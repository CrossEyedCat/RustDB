version: '3.8'

services:
  # Основной сервис RustDB
  rustdb:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rustdb-main
    ports:
      - "8080:8080"  # HTTP API
      - "8081:8081"  # gRPC API
    volumes:
      - rustdb_data:/app/data
      - rustdb_logs:/app/logs
      - ./config.toml:/app/config/config.toml:ro
    environment:
      - RUST_LOG=info
      - RUSTDB_DATA_DIR=/app/data
      - RUSTDB_LOG_DIR=/app/logs
    networks:
      - rustdb-network
    restart: unless-stopped
    depends_on:
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "rustdb", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: rustdb-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rustdb-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: rustdb-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - rustdb-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    container_name: rustdb-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - rustdb-network
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false

  # Nginx для load balancing
  nginx:
    image: nginx:alpine
    container_name: rustdb-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
    networks:
      - rustdb-network
    restart: unless-stopped
    depends_on:
      - rustdb

  # Jaeger для трассировки
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: rustdb-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - rustdb-network
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true

volumes:
  rustdb_data:
    driver: local
  rustdb_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  rustdb-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

