//! –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö RustBD
//! 
//! –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
//! - –†–∞–±–æ—Ç—É —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ñ–∞–π–ª–æ–≤ –ë–î
//! - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
//! - –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
//! - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

use rustbd::storage::database_file::{
    DatabaseFileHeader, DatabaseFileType, DatabaseFileState, FreePageMap,
    FileExtensionManager, ExtensionStrategy, ExtensionReason
};
use rustbd::common::Result;

fn main() -> Result<()> {
    println!("=== –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö RustBD ===\n");

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ñ–∞–π–ª–∞ –ë–î
    demonstrate_database_header()?;
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    demonstrate_free_page_map()?;
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    demonstrate_extension_manager()?;

    println!("\nüéâ –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!");
    Ok(())
}

fn demonstrate_database_header() -> Result<()> {
    println!("üìã === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –ë–î ===");
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
    let mut data_header = DatabaseFileHeader::new(DatabaseFileType::Data, 12345);
    data_header.file_sequence = 1;
    data_header.max_pages = 1000000; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 1 –º–∏–ª–ª–∏–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü
    data_header.extension_size = 512; // –†–∞—Å—à–∏—Ä—è–µ–º –ø–æ 512 —Å—Ç—Ä–∞–Ω–∏—Ü (2MB)
    
    println!("üóÑÔ∏è –°–æ–∑–¥–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö:");
    println!("   - –¢–∏–ø —Ñ–∞–π–ª–∞: {}", data_header.type_description());
    println!("   - –°–æ—Å—Ç–æ—è–Ω–∏–µ: {}", data_header.state_description());
    println!("   - ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {}", data_header.database_id);
    println!("   - –í–µ—Ä—Å–∏—è —Ñ–æ—Ä–º–∞—Ç–∞: {}.{}", data_header.version, data_header.subversion);
    println!("   - –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {} –±–∞–π—Ç", data_header.page_size);
    println!("   - –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü: {}", data_header.max_pages);
    println!("   - –†–∞–∑–º–µ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {} —Å—Ç—Ä–∞–Ω–∏—Ü", data_header.extension_size);
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å —Ñ–ª–∞–≥–∞–º–∏
    data_header.set_flag(DatabaseFileHeader::FLAG_COMPRESSED);
    data_header.set_flag(DatabaseFileHeader::FLAG_DEBUG_MODE);
    
    println!("   - –§–ª–∞–≥–∏:");
    println!("     * –°–∂–∞—Ç–∏–µ: {}", data_header.has_flag(DatabaseFileHeader::FLAG_COMPRESSED));
    println!("     * –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: {}", data_header.has_flag(DatabaseFileHeader::FLAG_ENCRYPTED));
    println!("     * –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã: {}", data_header.has_flag(DatabaseFileHeader::FLAG_CHECKSUM_ENABLED));
    println!("     * –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {}", data_header.has_flag(DatabaseFileHeader::FLAG_DEBUG_MODE));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    data_header.total_pages = 1000;
    data_header.used_pages = 750;
    data_header.free_pages = 250;
    data_header.increment_write_count();
    data_header.increment_read_count();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
    data_header.update_checksum();
    println!("   - –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞: 0x{:08X}", data_header.checksum);
    println!("   - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {}", data_header.is_valid());
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ñ–∞–π–ª–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    let mut index_header = DatabaseFileHeader::new(DatabaseFileType::Index, 12345);
    index_header.file_sequence = 2;
    index_header.catalog_root_page = Some(1); // –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
    index_header.update_checksum();
    
    println!("\nüìä –°–æ–∑–¥–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞ –∏–Ω–¥–µ–∫—Å–æ–≤:");
    println!("   - –¢–∏–ø —Ñ–∞–π–ª–∞: {}", index_header.type_description());
    println!("   - –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: {:?}", index_header.catalog_root_page);
    println!("   - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞: {}", index_header.file_sequence);
    
    Ok(())
}

fn demonstrate_free_page_map() -> Result<()> {
    println!("\nüó∫Ô∏è === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü ===");
    
    let mut free_map = FreePageMap::new();
    
    println!("üìç –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –±–ª–æ–∫–∏:");
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±–ª–æ–∫–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    free_map.add_free_block(100, 50)?; // 50 —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞—á–∏–Ω–∞—è —Å 100
    println!("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫: —Å—Ç—Ä–∞–Ω–∏—Ü—ã 100-149 (50 —Å—Ç—Ä–∞–Ω–∏—Ü)");
    
    free_map.add_free_block(200, 25)?; // 25 —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞—á–∏–Ω–∞—è —Å 200
    println!("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫: —Å—Ç—Ä–∞–Ω–∏—Ü—ã 200-224 (25 —Å—Ç—Ä–∞–Ω–∏—Ü)");
    
    free_map.add_free_block(300, 75)?; // 75 —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞—á–∏–Ω–∞—è —Å 300
    println!("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫: —Å—Ç—Ä–∞–Ω–∏—Ü—ã 300-374 (75 —Å—Ç—Ä–∞–Ω–∏—Ü)");
    
    // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å–µ–¥–Ω–∏–π –±–ª–æ–∫ (–¥–æ–ª–∂–µ–Ω –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å—Å—è)
    free_map.add_free_block(150, 20)?; // –°–æ—Å–µ–¥–Ω–∏–π —Å –ø–µ—Ä–≤—ã–º –±–ª–æ–∫–æ–º
    println!("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–æ—Å–µ–¥–Ω–∏–π –±–ª–æ–∫: —Å—Ç—Ä–∞–Ω–∏—Ü—ã 150-169 (20 —Å—Ç—Ä–∞–Ω–∏—Ü) - –æ–±—ä–µ–¥–∏–Ω–µ–Ω —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º");
    
    println!("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü:");
    println!("   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {}", free_map.header.total_entries);
    println!("   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {}", free_map.header.active_entries);
    println!("   - –í—Å–µ–≥–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {}", free_map.total_free_pages());
    println!("   - –ù–∞–∏–±–æ–ª—å—à–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π –±–ª–æ–∫: {} —Å—Ç—Ä–∞–Ω–∏—Ü", free_map.find_largest_free_block());
    
    println!("\nüíæ –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã:");
    
    // –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    if let Some(allocated) = free_map.allocate_pages(30) {
        println!("   ‚úÖ –í—ã–¥–µ–ª–µ–Ω–æ 30 —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–∞—á–∏–Ω–∞—è —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã {}", allocated);
    }
    
    if let Some(allocated) = free_map.allocate_pages(10) {
        println!("   ‚úÖ –í—ã–¥–µ–ª–µ–Ω–æ 10 —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–∞—á–∏–Ω–∞—è —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã {}", allocated);
    }
    
    if let Some(allocated) = free_map.allocate_pages(100) {
        println!("   ‚úÖ –í—ã–¥–µ–ª–µ–Ω–æ 100 —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–∞—á–∏–Ω–∞—è —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã {}", allocated);
    } else {
        println!("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å 100 —Å—Ç—Ä–∞–Ω–∏—Ü (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞)");
    }
    
    println!("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("   - –í—Å–µ–≥–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {}", free_map.total_free_pages());
    println!("   - –ù–∞–∏–±–æ–ª—å—à–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π –±–ª–æ–∫: {} —Å—Ç—Ä–∞–Ω–∏—Ü", free_map.find_largest_free_block());
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    println!("\nüîÑ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã:");
    free_map.free_pages(50, 15)?; // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º 15 —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞—á–∏–Ω–∞—è —Å 50
    println!("   ‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ 15 —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–∞—á–∏–Ω–∞—è —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã 50");
    
    // –î–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    println!("\nüîß –î–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É...");
    free_map.defragment();
    println!("   ‚úÖ –î–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    println!("   - –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {}", free_map.entries.len());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
    match free_map.validate() {
        Ok(_) => println!("   ‚úÖ –ö–∞—Ä—Ç–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"),
        Err(e) => println!("   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: {}", e),
    }
    
    Ok(())
}

fn demonstrate_extension_manager() -> Result<()> {
    println!("\nüìà === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ ===");
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    let strategies = vec![
        ("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", ExtensionStrategy::Fixed),
        ("–õ–∏–Ω–µ–π–Ω–∞—è", ExtensionStrategy::Linear),
        ("–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è", ExtensionStrategy::Exponential),
        ("–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è", ExtensionStrategy::Adaptive),
    ];
    
    for (name, strategy) in strategies {
        println!("\nüîß –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {}", name);
        
        let mut manager = FileExtensionManager::new(strategy);
        manager.min_extension_size = 32;  // 128KB
        manager.max_extension_size = 1024; // 4MB
        manager.growth_factor = 1.5;
        
        let current_size = 1000u64; // –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        let sizes = vec![10, 50, 100, 500];
        
        for required_size in sizes {
            let extension_size = manager.calculate_extension_size(current_size, required_size);
            println!("   - –¢—Ä–µ–±—É–µ—Ç—Å—è {} —Å—Ç—Ä–∞–Ω–∏—Ü ‚Üí —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ {} —Å—Ç—Ä–∞–Ω–∏—Ü", 
                     required_size, extension_size);
        }
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        let mut file_size = current_size;
        for i in 1..=3 {
            let old_size = file_size;
            let extension = manager.calculate_extension_size(file_size, 50);
            file_size += extension as u64;
            
            manager.record_extension(old_size, file_size, ExtensionReason::OutOfSpace);
            
            println!("   - –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ #{}: {} ‚Üí {} —Å—Ç—Ä–∞–Ω–∏—Ü (+{})", 
                     i, old_size, file_size, extension);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let stats = manager.get_statistics();
        println!("   - –í—Å–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {}", stats.total_extensions);
        println!("   - –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {:.1} —Å—Ç—Ä–∞–Ω–∏—Ü", stats.average_extension_size);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        let should_preextend = manager.should_preextend(file_size, 100, file_size);
        println!("   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {}", should_preextend);
    }
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    println!("\nüß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:");
    let mut adaptive_manager = FileExtensionManager::new(ExtensionStrategy::Adaptive);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–º–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π)
    let mut file_size = 500u64;
    for i in 1..=8 {
        let old_size = file_size;
        let extension = adaptive_manager.calculate_extension_size(file_size, 20);
        file_size += extension as u64;
        
        let reason = if i % 3 == 0 {
            ExtensionReason::Preallocation
        } else {
            ExtensionReason::OutOfSpace
        };
        
        adaptive_manager.record_extension(old_size, file_size, reason);
        
        println!("   - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ #{}: +{} —Å—Ç—Ä–∞–Ω–∏—Ü (–ø—Ä–∏—á–∏–Ω–∞: {:?})", 
                 i, extension, reason);
    }
    
    let final_stats = adaptive_manager.get_statistics();
    println!("   - –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("     * –í—Å–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {}", final_stats.total_extensions);
    println!("     * –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {:.1} —Å—Ç—Ä–∞–Ω–∏—Ü", final_stats.average_extension_size);
    
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_database_structure_example() -> Result<()> {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ —Ç–µ—Å—Ç
        main()
    }

    #[test]
    fn test_header_operations() -> Result<()> {
        let mut header = DatabaseFileHeader::new(DatabaseFileType::Data, 999);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        assert_eq!(header.database_id, 999);
        assert_eq!(header.file_type, DatabaseFileType::Data);
        assert_eq!(header.file_state, DatabaseFileState::Creating);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏
        header.set_flag(DatabaseFileHeader::FLAG_COMPRESSED);
        assert!(header.has_flag(DatabaseFileHeader::FLAG_COMPRESSED));
        
        header.clear_flag(DatabaseFileHeader::FLAG_COMPRESSED);
        assert!(!header.has_flag(DatabaseFileHeader::FLAG_COMPRESSED));
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        header.update_checksum();
        assert!(header.is_valid());
        
        Ok(())
    }

    #[test]
    fn test_free_page_map_operations() -> Result<()> {
        let mut map = FreePageMap::new();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏
        map.add_free_block(10, 5)?;
        map.add_free_block(20, 10)?;
        
        assert_eq!(map.total_free_pages(), 15);
        assert_eq!(map.find_largest_free_block(), 10);
        
        // –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let allocated = map.allocate_pages(3);
        assert_eq!(allocated, Some(10)); // –î–æ–ª–∂–µ–Ω –≤—ã–¥–µ–ª–∏—Ç—å –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –±–ª–æ–∫–∞ (first-fit)
        
        assert_eq!(map.total_free_pages(), 12);
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        map.free_pages(50, 5)?;
        assert_eq!(map.total_free_pages(), 17);
        
        Ok(())
    }

    #[test]
    fn test_extension_strategies() {
        let fixed = FileExtensionManager::new(ExtensionStrategy::Fixed);
        let linear = FileExtensionManager::new(ExtensionStrategy::Linear);
        let exponential = FileExtensionManager::new(ExtensionStrategy::Exponential);
        
        let current_size = 1000;
        let required = 10;
        
        let fixed_ext = fixed.calculate_extension_size(current_size, required);
        let linear_ext = linear.calculate_extension_size(current_size, required);
        let exp_ext = exponential.calculate_extension_size(current_size, required);
        
        // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ª–∂–Ω–∞ –¥–∞–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        assert!(fixed_ext >= required as u32);
        
        // –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        assert!(linear_ext >= fixed_ext);
        assert!(exp_ext >= fixed_ext);
    }
}
