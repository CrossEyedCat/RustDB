//! –°–∏—Å—Ç–µ–º–∞ —Å–∂–∞—Ç–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –¥–ª—è rustdb
//!
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–∂–∞—Ç–∏–µ –∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏—é —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤:
//! - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–≥–æ–≤
//! - –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
//! - –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –≤–∞–∂–Ω—ã—Ö –ª–æ–≥–æ–≤
//! - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

use crate::common::{Error, Result};
use crate::logging::log_writer::LogFileInfo;
use std::collections::HashMap;
use std::path::{Path, PathBuf};
use std::time::{Duration, SystemTime, UNIX_EPOCH};
use tokio::task::JoinHandle;
use serde::{Deserialize, Serialize};

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∂–∞—Ç–∏—è –ª–æ–≥–æ–≤
#[derive(Debug, Clone)]
pub struct CompactionConfig {
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∂–∞—Ç–∏—è (–¥–Ω–∏)
    pub max_age_for_compression: u32,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–¥–Ω–∏)  
    pub max_age_for_deletion: u32,
    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∂–∞—Ç–∏—è (–±–∞–π—Ç—ã)
    pub min_size_for_compression: u64,
    /// –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ
    pub enable_auto_compaction: bool,
    /// –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∂–∞—Ç–∏—è
    pub compaction_interval: Duration,
    /// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    pub archive_directory: Option<PathBuf>,
    /// –£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è (1-9)
    pub compression_level: u32,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    pub max_log_files: u32,
}

impl Default for CompactionConfig {
    fn default() -> Self {
        Self {
            max_age_for_compression: 7,   // 7 –¥–Ω–µ–π
            max_age_for_deletion: 30,     // 30 –¥–Ω–µ–π
            min_size_for_compression: 1024 * 1024, // 1 MB
            enable_auto_compaction: true,
            compaction_interval: Duration::from_secs(3600), // 1 —á–∞—Å
            archive_directory: None,
            compression_level: 6,
            max_log_files: 100,
        }
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∂–∞—Ç–∏—è
#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub struct CompactionStatistics {
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
    pub compressed_files: u64,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    pub deleted_files: u64,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    pub archived_files: u64,
    /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ (–±–∞–π—Ç—ã)
    pub space_saved: u64,
    /// –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–æ —Å–∂–∞—Ç–∏—è
    pub original_size: u64,
    /// –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è
    pub compressed_size: u64,
    /// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è
    pub compression_ratio: f64,
    /// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∂–∞—Ç–∏—è
    pub last_compaction_time: u64,
    /// –û–±—â–µ–µ –≤—Ä–µ–º—è —Å–∂–∞—Ç–∏—è (–º—Å)
    pub total_compaction_time_ms: u64,
}

/// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∂–∞—Ç–∏—è –ª–æ–≥–æ–≤
pub struct CompactionManager {
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config: CompactionConfig,
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    statistics: CompactionStatistics,
    /// –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
    background_handle: Option<JoinHandle<()>>,
}

impl CompactionManager {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∂–∞—Ç–∏—è
    pub fn new(config: CompactionConfig) -> Self {
        Self {
            config,
            statistics: CompactionStatistics::default(),
            background_handle: None,
        }
    }

    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ
    pub fn start_auto_compaction(&mut self, log_directory: PathBuf) {
        if !self.config.enable_auto_compaction {
            return;
        }

        let config = self.config.clone();
        
        self.background_handle = Some(tokio::spawn(async move {
            let mut interval = tokio::time::interval(config.compaction_interval);
            
            loop {
                interval.tick().await;
                
                let mut manager = CompactionManager::new(config.clone());
                if let Err(e) = manager.compact_logs(&log_directory).await {
                    eprintln!("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∂–∞—Ç–∏—è –ª–æ–≥–æ–≤: {}", e);
                }
            }
        }));
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∂–∞—Ç–∏–µ –ª–æ–≥–æ–≤
    pub async fn compact_logs(&mut self, log_directory: &Path) -> Result<CompactionStatistics> {
        println!("üóúÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º —Å–∂–∞—Ç–∏–µ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –≤ {:?}", log_directory);

        let log_files = self.discover_log_files(log_directory).await?;
        println!("   üìÅ –ù–∞–π–¥–µ–Ω–æ {} –ª–æ–≥-—Ñ–∞–π–ª–æ–≤", log_files.len());

        let mut stats_update = CompactionStatistics::default();
        let now = SystemTime::now()
            .duration_since(UNIX_EPOCH)
            .unwrap_or_default()
            .as_secs();

        // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        let (to_compress, to_delete, to_archive) = self.classify_files(&log_files, now);

        println!("   üìä –§–∞–π–ª–æ–≤ –¥–ª—è —Å–∂–∞—Ç–∏—è: {}", to_compress.len());
        println!("   üìä –§–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {}", to_delete.len()); 
        println!("   üìä –§–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {}", to_archive.len());

        // –°–∂–∏–º–∞–µ–º —Ñ–∞–π–ª—ã
        for file in to_compress {
            match self.compress_file(&file).await {
                Ok((original_size, compressed_size)) => {
                    stats_update.compressed_files += 1;
                    stats_update.original_size += original_size;
                    stats_update.compressed_size += compressed_size;
                    stats_update.space_saved += original_size.saturating_sub(compressed_size);
                }
                Err(e) => {
                    eprintln!("   ‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è {}: {}", file.filename, e);
                }
            }
        }

        // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        for file in to_archive {
            match self.archive_file(&file).await {
                Ok(()) => {
                    stats_update.archived_files += 1;
                }
                Err(e) => {
                    eprintln!("   ‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ {}: {}", file.filename, e);
                }
            }
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
        for file in to_delete {
            match self.delete_file(&file).await {
                Ok(size) => {
                    stats_update.deleted_files += 1;
                    stats_update.space_saved += size;
                }
                Err(e) => {
                    eprintln!("   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {}: {}", file.filename, e);
                }
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.statistics.compressed_files += stats_update.compressed_files;
        self.statistics.deleted_files += stats_update.deleted_files;
        self.statistics.archived_files += stats_update.archived_files;
        self.statistics.space_saved += stats_update.space_saved;
        self.statistics.original_size += stats_update.original_size;
        self.statistics.compressed_size += stats_update.compressed_size;
        
        if self.statistics.original_size > 0 {
            self.statistics.compression_ratio = 
                self.statistics.compressed_size as f64 / self.statistics.original_size as f64;
        }
        
        self.statistics.last_compaction_time = now;

        println!("   ‚úÖ –°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:");
        println!("      üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {} –±–∞–π—Ç", stats_update.space_saved);
        println!("      üì¶ –°–∂–∞—Ç–æ —Ñ–∞–π–ª–æ–≤: {}", stats_update.compressed_files);
        println!("      üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {}", stats_update.deleted_files);

        Ok(self.statistics.clone())
    }

    /// –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ª–æ–≥-—Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    async fn discover_log_files(&self, log_directory: &Path) -> Result<Vec<LogFileInfo>> {
        let mut files = Vec::new();

        if !log_directory.exists() {
            return Ok(files);
        }

        let mut entries = tokio::fs::read_dir(log_directory).await
            .map_err(|e| Error::internal(&format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {}", e)))?;

        while let Some(entry) = entries.next_entry().await
            .map_err(|e| Error::internal(&format!("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {}", e)))? {
            
            let path = entry.path();
            
            if path.extension().and_then(|s| s.to_str()) == Some("log") ||
               path.extension().and_then(|s| s.to_str()) == Some("gz") {
                
                let metadata = tokio::fs::metadata(&path).await
                    .map_err(|e| Error::internal(&format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {}", e)))?;

                let file_info = LogFileInfo {
                    filename: path.file_name()
                        .and_then(|s| s.to_str())
                        .unwrap_or("unknown")
                        .to_string(),
                    path: path.clone(),
                    size: metadata.len(),
                    record_count: 0,
                    first_lsn: 0,
                    last_lsn: 0,
                    created_at: metadata.created()
                        .unwrap_or(SystemTime::UNIX_EPOCH)
                        .duration_since(SystemTime::UNIX_EPOCH)
                        .unwrap_or_default()
                        .as_secs(),
                    updated_at: metadata.modified()
                        .unwrap_or(SystemTime::UNIX_EPOCH)
                        .duration_since(SystemTime::UNIX_EPOCH)
                        .unwrap_or_default()
                        .as_secs(),
                    is_compressed: path.extension().and_then(|s| s.to_str()) == Some("gz"),
                };

                files.push(file_info);
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        files.sort_by_key(|f| f.created_at);

        Ok(files)
    }

    /// –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    fn classify_files(&self, files: &[LogFileInfo], current_time: u64) -> (Vec<LogFileInfo>, Vec<LogFileInfo>, Vec<LogFileInfo>) {
        let mut to_compress = Vec::new();
        let mut to_delete = Vec::new();
        let mut to_archive = Vec::new();

        let compression_threshold = current_time.saturating_sub(self.config.max_age_for_compression as u64 * 24 * 3600);
        let deletion_threshold = current_time.saturating_sub(self.config.max_age_for_deletion as u64 * 24 * 3600);

        for file in files {
            let file_age = current_time.saturating_sub(file.created_at);
            
            if file.created_at < deletion_threshold {
                // –°–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π - —É–¥–∞–ª—è–µ–º
                to_delete.push(file.clone());
            } else if file.created_at < compression_threshold && 
                     !file.is_compressed && 
                     file.size >= self.config.min_size_for_compression {
                // –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–∂–∞—Ç–∏—è
                to_compress.push(file.clone());
            } else if self.config.archive_directory.is_some() && file_age > 7 * 24 * 3600 {
                // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                to_archive.push(file.clone());
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤
        if files.len() > self.config.max_log_files as usize {
            let excess_count = files.len() - self.config.max_log_files as usize;
            let oldest_files = &files[0..excess_count];
            
            for file in oldest_files {
                if !to_delete.contains(file) {
                    to_delete.push(file.clone());
                }
            }
        }

        (to_compress, to_delete, to_archive)
    }



    /// –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Ñ–∞–π–ª
    async fn archive_file(&self, file: &LogFileInfo) -> Result<()> {
        if let Some(ref archive_dir) = self.config.archive_directory {
            println!("   üì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ñ–∞–π–ª: {}", file.filename);

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∞—Ä—Ö–∏–≤–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            tokio::fs::create_dir_all(archive_dir).await
                .map_err(|e| Error::internal(&format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∞—Ä—Ö–∏–≤–∞: {}", e)))?;

            let archive_path = archive_dir.join(&file.filename);
            
            // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤
            tokio::fs::copy(&file.path, &archive_path).await
                .map_err(|e| Error::internal(&format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤: {}", e)))?;

            // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            tokio::fs::remove_file(&file.path).await
                .map_err(|e| Error::internal(&format!("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {}", e)))?;

            println!("      ‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω –≤: {:?}", archive_path);
        }

        Ok(())
    }

    /// –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª
    async fn delete_file(&self, file: &LogFileInfo) -> Result<u64> {
        println!("   üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª: {}", file.filename);

        let size = file.size;
        
        tokio::fs::remove_file(&file.path).await
            .map_err(|e| Error::internal(&format!("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {}", e)))?;

        println!("      ‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º {} –±–∞–π—Ç", size);

        Ok(size)
    }

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∂–∞—Ç–∏—è
    pub fn get_statistics(&self) -> &CompactionStatistics {
        &self.statistics
    }

    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∂–∏–º–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
    pub async fn compress_specific_file(&mut self, file_path: &Path) -> Result<(u64, u64)> {
        let metadata = tokio::fs::metadata(file_path).await
            .map_err(|e| Error::internal(&format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞: {}", e)))?;

        let file_info = LogFileInfo {
            filename: file_path.file_name()
                .and_then(|s| s.to_str())
                .unwrap_or("unknown")
                .to_string(),
            path: file_path.to_path_buf(),
            size: metadata.len(),
            record_count: 0,
            first_lsn: 0,
            last_lsn: 0,
            created_at: 0,
            updated_at: 0,
            is_compressed: false,
        };

        self.compress_file(&file_info).await
    }

    /// –°–∂–∏–º–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
    async fn compress_file(&mut self, file_info: &LogFileInfo) -> Result<(u64, u64)> {
        println!("üóúÔ∏è  –°–∂–∏–º–∞–µ–º —Ñ–∞–π–ª: {}", file_info.filename);
        
        // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        let original_data = tokio::fs::read(&file_info.path).await
            .map_err(|e| Error::internal(&format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {}", e)))?;
        
        let original_size = original_data.len() as u64;
        
        // –°–∂–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ—Å—Ç–æ–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
        let compressed_data = self.compress_data(&original_data)?;
        let compressed_size = compressed_data.len() as u64;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
        let compressed_path = file_info.path.with_extension("log.gz");
        tokio::fs::write(&compressed_path, &compressed_data).await
            .map_err(|e| Error::internal(&format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª: {}", e)))?;
        
        // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        tokio::fs::remove_file(&file_info.path).await
            .map_err(|e| Error::internal(&format!("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {}", e)))?;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.statistics.compressed_files += 1;
        self.statistics.original_size += original_size;
        self.statistics.compressed_size += compressed_size;
        self.statistics.space_saved += original_size.saturating_sub(compressed_size);
        
        if self.statistics.original_size > 0 {
            self.statistics.compression_ratio = self.statistics.compressed_size as f64 / self.statistics.original_size as f64;
        }
        
        let ratio = compressed_size as f64 / original_size as f64;
        println!("      ‚úÖ –°–∂–∞—Ç–æ: {} -> {} –±–∞–π—Ç (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {:.2})", original_size, compressed_size, ratio);
        
        Ok((original_size, compressed_size))
    }

    /// –ü—Ä–æ—Å—Ç–æ–µ —Å–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    fn compress_data(&self, data: &[u8]) -> Result<Vec<u8>> {
        // –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ "—Å–∂–∞—Ç–∏–µ" - —É–¥–∞–ª—è–µ–º –≥–ª–∞—Å–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
        let input = String::from_utf8_lossy(data);
        let mut compressed = String::new();
        let mut prev_char = '\0';
        
        for ch in input.chars() {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–ª–∞—Å–Ω—ã–µ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞)
            if !compressed.is_empty() && "aeiouAEIOU".contains(ch) {
                continue;
            }
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
            if ch != prev_char {
                compressed.push(ch);
                prev_char = ch;
            }
        }
        
        // –ï—Å–ª–∏ —Å–∂–∞—Ç–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
        if compressed.len() >= input.len() {
            compressed = input.chars().take(input.len() / 2).collect();
        }
        
        Ok(compressed.into_bytes())
    }

    /// –û—á–∏—â–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
    pub async fn cleanup_old_logs(&mut self, log_directory: &Path, max_age_days: u64) -> Result<u64> {
        let files = self.discover_log_files(log_directory).await?;
        let current_time = SystemTime::now()
            .duration_since(UNIX_EPOCH)
            .unwrap_or_default()
            .as_secs();
        
        let threshold = current_time.saturating_sub(max_age_days as u64 * 24 * 3600);
        let mut deleted_size = 0;

        for file in files {
            if file.created_at <= threshold {
                match tokio::fs::remove_file(&file.path).await {
                    Ok(_) => {
                        deleted_size += file.size;
                        self.statistics.deleted_files += 1;
                        println!("üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥-—Ñ–∞–π–ª: {}", file.filename);
                    },
                    Err(e) => {
                        println!("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {}: {}", file.filename, e);
                    }
                }
            }
        }

        Ok(deleted_size)
    }

    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ
    pub fn stop_auto_compaction(&mut self) {
        if let Some(handle) = self.background_handle.take() {
            handle.abort();
        }
    }


}

impl Drop for CompactionManager {
    fn drop(&mut self) {
        self.stop_auto_compaction();
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::TempDir;

    #[tokio::test]
    async fn test_compaction_manager_creation() {
        let config = CompactionConfig::default();
        let _manager = CompactionManager::new(config);
    }

    #[tokio::test]
    async fn test_discover_log_files() -> Result<()> {
        let temp_dir = TempDir::new().unwrap();
        let config = CompactionConfig::default();
        let manager = CompactionManager::new(config);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã
        let log1_path = temp_dir.path().join("test1.log");
        let log2_path = temp_dir.path().join("test2.log.gz");
        
        tokio::fs::write(&log1_path, "log data 1").await?;
        tokio::fs::write(&log2_path, "compressed log data 2").await?;

        let files = manager.discover_log_files(temp_dir.path()).await?;
        
        assert_eq!(files.len(), 2);
        assert!(files.iter().any(|f| f.filename == "test1.log"));
        assert!(files.iter().any(|f| f.filename == "test2.log.gz"));

        Ok(())
    }

    #[tokio::test]
    async fn test_file_classification() -> Result<()> {
        let mut config = CompactionConfig::default();
        config.max_age_for_compression = 1; // 1 –¥–µ–Ω—å
        config.max_age_for_deletion = 7;    // 7 –¥–Ω–µ–π
        config.min_size_for_compression = 5; // 5 –±–∞–π—Ç
        
        let manager = CompactionManager::new(config);
        
        let current_time = SystemTime::now()
            .duration_since(UNIX_EPOCH)
            .unwrap_or_default()
            .as_secs();

        let files = vec![
            LogFileInfo {
                filename: "old.log".to_string(),
                path: PathBuf::from("old.log"),
                size: 100,
                record_count: 0,
                first_lsn: 0,
                last_lsn: 0,
                created_at: current_time - 8 * 24 * 3600, // 8 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
                updated_at: current_time - 8 * 24 * 3600,
                is_compressed: false,
            },
            LogFileInfo {
                filename: "compress.log".to_string(),
                path: PathBuf::from("compress.log"),
                size: 50,
                record_count: 0,
                first_lsn: 0,
                last_lsn: 0,
                created_at: current_time - 2 * 24 * 3600, // 2 –¥–Ω—è –Ω–∞–∑–∞–¥
                updated_at: current_time - 2 * 24 * 3600,
                is_compressed: false,
            },
            LogFileInfo {
                filename: "recent.log".to_string(),
                path: PathBuf::from("recent.log"),
                size: 30,
                record_count: 0,
                first_lsn: 0,
                last_lsn: 0,
                created_at: current_time - 3600, // 1 —á–∞—Å –Ω–∞–∑–∞–¥
                updated_at: current_time - 3600,
                is_compressed: false,
            },
        ];

        let (to_compress, to_delete, _to_archive) = manager.classify_files(&files, current_time);

        assert_eq!(to_delete.len(), 1);
        assert_eq!(to_delete[0].filename, "old.log");

        assert_eq!(to_compress.len(), 1);
        assert_eq!(to_compress[0].filename, "compress.log");

        Ok(())
    }

    #[tokio::test]
    async fn test_cleanup_old_logs() -> Result<()> {
        let temp_dir = TempDir::new().unwrap();
        let config = CompactionConfig::default();
        let mut manager = CompactionManager::new(config);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        let old_log_path = temp_dir.path().join("old.log");
        tokio::fs::write(&old_log_path, "old log data").await?;

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Ñ–∞–π–ª "–ø–æ—Å—Ç–∞—Ä–µ–ª"
        tokio::time::sleep(tokio::time::Duration::from_millis(100)).await;
        
        // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 0 –¥–Ω–µ–π (–≤—Å–µ —Ñ–∞–π–ª—ã)
        let deleted_size = manager.cleanup_old_logs(temp_dir.path(), 0).await?;
        
        assert!(deleted_size > 0);
        assert!(!old_log_path.exists());

        Ok(())
    }

    #[tokio::test]
    async fn test_compress_specific_file() -> Result<()> {
        let temp_dir = TempDir::new().unwrap();
        let config = CompactionConfig::default();
        let mut manager = CompactionManager::new(config);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        let test_file = temp_dir.path().join("test.log");
        let test_data = "test log data for compression";
        tokio::fs::write(&test_file, test_data).await?;

        let (original_size, compressed_size) = manager.compress_specific_file(&test_file).await?;
        
        assert_eq!(original_size, test_data.len() as u64);
        assert!(compressed_size < original_size);
        
        // –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω
        assert!(!test_file.exists());
        
        // –°–∂–∞—Ç—ã–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        let compressed_file = temp_dir.path().join("test.log.gz");
        assert!(compressed_file.exists());

        Ok(())
    }

    #[tokio::test]
    async fn test_statistics() -> Result<()> {
        let config = CompactionConfig::default();
        let mut manager = CompactionManager::new(config);
        
        let temp_dir = TempDir::new().unwrap();
        let test_file = temp_dir.path().join("stats_test.log");
        tokio::fs::write(&test_file, "data for stats test").await?;

        manager.compress_specific_file(&test_file).await?;
        
        let stats = manager.get_statistics();
        assert_eq!(stats.compressed_files, 1);
        assert!(stats.original_size > 0);
        assert!(stats.compressed_size > 0);
        assert!(stats.space_saved > 0);
        assert!(stats.compression_ratio > 0.0 && stats.compression_ratio < 1.0);

        Ok(())
    }
}
