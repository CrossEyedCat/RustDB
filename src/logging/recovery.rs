//! –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–≥–æ–≤ –¥–ª—è RustBD
//!
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–±–æ–µ–≤:
//! - –ê–Ω–∞–ª–∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
//! - REDO –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
//! - UNDO –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
//! - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

use crate::common::{Error, Result};
use crate::logging::log_record::{LogRecord, LogRecordType, LogSequenceNumber, TransactionId};
use crate::logging::log_writer::{LogWriter, LogFileInfo};
use crate::storage::database_file::PageId;
use std::collections::{HashMap, HashSet, BTreeMap};
use std::path::Path;
use std::time::{Duration, Instant};
use serde::{Deserialize, Serialize};

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
enum RecoveryTransactionState {
    /// –ê–∫—Ç–∏–≤–Ω–∞ (–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
    Active,
    /// –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞
    Committed,
    /// –û—Ç–º–µ–Ω–µ–Ω–∞
    Aborted,
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
#[derive(Debug, Clone)]
struct RecoveryTransactionInfo {
    /// ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    id: TransactionId,
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ
    state: RecoveryTransactionState,
    /// –ü–µ—Ä–≤—ã–π LSN —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    first_lsn: LogSequenceNumber,
    /// –ü–æ—Å–ª–µ–¥–Ω–∏–π LSN —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    last_lsn: LogSequenceNumber,
    /// –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    operations: Vec<LogRecord>,
    /// –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    dirty_pages: HashSet<(u32, PageId)>,
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤
#[derive(Debug, Clone)]
pub struct LogAnalysisResult {
    /// –ü–æ—Å–ª–µ–¥–Ω–∏–π LSN –≤ –ª–æ–≥–∞—Ö
    pub last_lsn: LogSequenceNumber,
    /// LSN –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
    pub checkpoint_lsn: Option<LogSequenceNumber>,
    /// –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–±–æ—è
    pub active_transactions: HashMap<TransactionId, RecoveryTransactionInfo>,
    /// –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    pub committed_transactions: HashMap<TransactionId, RecoveryTransactionInfo>,
    /// –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    pub aborted_transactions: HashMap<TransactionId, RecoveryTransactionInfo>,
    /// –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pub dirty_pages: HashSet<(u32, PageId)>,
    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    pub total_records: u64,
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub struct RecoveryStatistics {
    /// –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    pub start_time: u64,
    /// –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    pub end_time: u64,
    /// –û–±—â–µ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–º—Å)
    pub total_duration_ms: u64,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
    pub log_files_processed: u32,
    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥-–∑–∞–ø–∏—Å–µ–π
    pub total_log_records: u64,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π REDO
    pub redo_operations: u64,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π UNDO
    pub undo_operations: u64,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    pub recovered_transactions: u64,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    pub rolled_back_transactions: u64,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    pub recovered_pages: u64,
    /// –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ (–±–∞–π—Ç—ã)
    pub processed_log_size: u64,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    pub recovery_errors: u64,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
#[derive(Debug, Clone)]
pub struct RecoveryConfig {
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    pub max_recovery_time: Duration,
    /// –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤
    pub read_buffer_size: usize,
    /// –í–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    pub enable_parallel_recovery: bool,
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    pub recovery_threads: usize,
    /// –í–∫–ª—é—á–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    pub enable_validation: bool,
    /// –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    pub create_backup: bool,
}

impl Default for RecoveryConfig {
    fn default() -> Self {
        Self {
            max_recovery_time: Duration::from_secs(300), // 5 –º–∏–Ω—É—Ç
            read_buffer_size: 64 * 1024, // 64KB
            enable_parallel_recovery: true,
            recovery_threads: 4,
            enable_validation: true,
            create_backup: false,
        }
    }
}

/// –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
pub struct RecoveryManager {
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config: RecoveryConfig,
    /// –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
    log_writer: Option<LogWriter>,
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    statistics: RecoveryStatistics,
}

impl RecoveryManager {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    pub fn new(config: RecoveryConfig) -> Self {
        Self {
            config,
            log_writer: None,
            statistics: RecoveryStatistics::default(),
        }
    }

    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
    pub fn set_log_writer(&mut self, log_writer: LogWriter) {
        self.log_writer = Some(log_writer);
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    pub async fn recover_database(&mut self, log_directory: &Path) -> Result<RecoveryStatistics> {
        let start_time = Instant::now();
        self.statistics.start_time = start_time.elapsed().as_secs();

        println!("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

        // –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
        println!("üìä –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤");
        let analysis_result = self.analyze_logs(log_directory).await?;
        
        println!("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} –ª–æ–≥-–∑–∞–ø–∏—Å–µ–π", analysis_result.total_records);
        println!("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", analysis_result.active_transactions.len());
        println!("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", analysis_result.committed_transactions.len());

        // –≠—Ç–∞–ø 2: REDO –æ–ø–µ—Ä–∞—Ü–∏–∏
        println!("üîÑ –≠—Ç–∞–ø 2: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (REDO)");
        self.perform_redo_operations(&analysis_result).await?;
        
        println!("   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {} –æ–ø–µ—Ä–∞—Ü–∏–π REDO", self.statistics.redo_operations);

        // –≠—Ç–∞–ø 3: UNDO –æ–ø–µ—Ä–∞—Ü–∏–∏
        println!("‚Ü©Ô∏è  –≠—Ç–∞–ø 3: –û—Ç–∫–∞—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (UNDO)");
        self.perform_undo_operations(&analysis_result).await?;
        
        println!("   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {} –æ–ø–µ—Ä–∞—Ü–∏–π UNDO", self.statistics.undo_operations);

        // –≠—Ç–∞–ø 4: –í–∞–ª–∏–¥–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if self.config.enable_validation {
            println!("üîç –≠—Ç–∞–ø 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö");
            self.validate_recovery(&analysis_result).await?;
            println!("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let end_time = Instant::now();
        self.statistics.end_time = end_time.duration_since(start_time).as_secs();
        self.statistics.total_duration_ms = start_time.elapsed().as_millis() as u64;

        println!("üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
        println!("   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {} –º—Å", self.statistics.total_duration_ms);
        println!("   üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}", self.statistics.recovered_transactions);
        println!("   üìä –û—Ç–º–µ–Ω–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}", self.statistics.rolled_back_transactions);

        Ok(self.statistics.clone())
    }

    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥-—Ñ–∞–π–ª—ã –∏ —Å—Ç—Ä–æ–∏—Ç –∫–∞—Ä—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    async fn analyze_logs(&mut self, log_directory: &Path) -> Result<LogAnalysisResult> {
        let mut result = LogAnalysisResult {
            last_lsn: 0,
            checkpoint_lsn: None,
            active_transactions: HashMap::new(),
            committed_transactions: HashMap::new(),
            aborted_transactions: HashMap::new(),
            dirty_pages: HashSet::new(),
            total_records: 0,
        };

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
        let log_files = self.get_log_files(log_directory)?;
        self.statistics.log_files_processed = log_files.len() as u32;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–æ—Ä—è–¥–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è
        for log_file in log_files {
            println!("   üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {}", log_file.filename);
            
            let records = self.read_log_file(&log_file).await?;
            self.statistics.processed_log_size += log_file.size;
            
            for record in records {
                self.process_log_record(&mut result, record).await?;
                result.total_records += 1;
            }
        }

        self.statistics.total_log_records = result.total_records;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É
        if let Some(checkpoint_lsn) = result.checkpoint_lsn {
            println!("   üìç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–∞ LSN: {}", checkpoint_lsn);
        }

        Ok(result)
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
    fn get_log_files(&self, log_directory: &Path) -> Result<Vec<LogFileInfo>> {
        let mut files = Vec::new();

        if !log_directory.exists() {
            return Ok(files);
        }

        let entries = std::fs::read_dir(log_directory).map_err(|e| {
            Error::internal(&format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤: {}", e))
        })?;

        for entry in entries {
            let entry = entry.map_err(|e| Error::internal(&format!("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {}", e)))?;
            let path = entry.path();

            if path.extension().and_then(|s| s.to_str()) == Some("log") {
                let metadata = std::fs::metadata(&path).map_err(|e| {
                    Error::internal(&format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞: {}", e))
                })?;

                let file_info = LogFileInfo {
                    filename: path.file_name()
                        .and_then(|s| s.to_str())
                        .unwrap_or("unknown")
                        .to_string(),
                    path: path.clone(),
                    size: metadata.len(),
                    record_count: 0,
                    first_lsn: 0,
                    last_lsn: 0,
                    created_at: metadata.created()
                        .unwrap_or(std::time::SystemTime::UNIX_EPOCH)
                        .duration_since(std::time::SystemTime::UNIX_EPOCH)
                        .unwrap_or_default()
                        .as_secs(),
                    updated_at: metadata.modified()
                        .unwrap_or(std::time::SystemTime::UNIX_EPOCH)
                        .duration_since(std::time::SystemTime::UNIX_EPOCH)
                        .unwrap_or_default()
                        .as_secs(),
                    is_compressed: false,
                };

                files.push(file_info);
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        files.sort_by_key(|f| f.created_at);

        Ok(files)
    }

    /// –ß–∏—Ç–∞–µ—Ç –ª–æ–≥-–∑–∞–ø–∏—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞
    async fn read_log_file(&self, _log_file: &LogFileInfo) -> Result<Vec<LogRecord>> {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —á—Ç–µ–Ω–∏–µ –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        Ok(Vec::new())
    }

    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –ª–æ–≥-–∑–∞–ø–∏—Å—å
    async fn process_log_record(&mut self, result: &mut LogAnalysisResult, record: LogRecord) -> Result<()> {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π LSN
        if record.lsn > result.last_lsn {
            result.last_lsn = record.lsn;
        }

        match record.record_type {
            LogRecordType::TransactionBegin => {
                if let Some(tx_id) = record.transaction_id {
                    let tx_info = RecoveryTransactionInfo {
                        id: tx_id,
                        state: RecoveryTransactionState::Active,
                        first_lsn: record.lsn,
                        last_lsn: record.lsn,
                        operations: vec![record.clone()],
                        dirty_pages: HashSet::new(),
                    };
                    result.active_transactions.insert(tx_id, tx_info);
                }
            }

            LogRecordType::TransactionCommit => {
                if let Some(tx_id) = record.transaction_id {
                    if let Some(mut tx_info) = result.active_transactions.remove(&tx_id) {
                        tx_info.state = RecoveryTransactionState::Committed;
                        tx_info.last_lsn = record.lsn;
                        tx_info.operations.push(record);
                        result.committed_transactions.insert(tx_id, tx_info);
                    }
                }
            }

            LogRecordType::TransactionAbort => {
                if let Some(tx_id) = record.transaction_id {
                    if let Some(mut tx_info) = result.active_transactions.remove(&tx_id) {
                        tx_info.state = RecoveryTransactionState::Aborted;
                        tx_info.last_lsn = record.lsn;
                        tx_info.operations.push(record);
                        result.aborted_transactions.insert(tx_id, tx_info);
                    }
                }
            }

            LogRecordType::DataInsert | LogRecordType::DataUpdate | LogRecordType::DataDelete => {
                if let Some(tx_id) = record.transaction_id {
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    let tx_map = if result.active_transactions.contains_key(&tx_id) {
                        &mut result.active_transactions
                    } else if result.committed_transactions.contains_key(&tx_id) {
                        &mut result.committed_transactions
                    } else if result.aborted_transactions.contains_key(&tx_id) {
                        &mut result.aborted_transactions
                    } else {
                        return Ok(());
                    };

                    if let Some(tx_info) = tx_map.get_mut(&tx_id) {
                        tx_info.operations.push(record.clone());
                        tx_info.last_lsn = record.lsn;

                        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        if let crate::logging::log_record::LogOperationData::Record(op) = &record.operation_data {
                            let page_key = (op.file_id, op.page_id);
                            tx_info.dirty_pages.insert(page_key);
                            result.dirty_pages.insert(page_key);
                        }
                    }
                }
            }

            LogRecordType::Checkpoint => {
                result.checkpoint_lsn = Some(record.lsn);
            }

            _ => {
                // –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∑–∞–ø–∏—Å–µ–π
            }
        }

        Ok(())
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ REDO –¥–ª—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    async fn perform_redo_operations(&mut self, analysis_result: &LogAnalysisResult) -> Result<()> {
        let mut redo_count = 0;

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        let mut all_operations: BTreeMap<LogSequenceNumber, &LogRecord> = BTreeMap::new();

        for tx_info in analysis_result.committed_transactions.values() {
            for operation in &tx_info.operations {
                if matches!(
                    operation.record_type,
                    LogRecordType::DataInsert | LogRecordType::DataUpdate | LogRecordType::DataDelete
                ) {
                    all_operations.insert(operation.lsn, operation);
                }
            }
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ LSN
        for (lsn, operation) in all_operations {
            self.apply_redo_operation(lsn, operation).await?;
            redo_count += 1;

            if redo_count % 1000 == 0 {
                println!("   üìù –í—ã–ø–æ–ª–Ω–µ–Ω–æ {} –æ–ø–µ—Ä–∞—Ü–∏–π REDO", redo_count);
            }
        }

        self.statistics.redo_operations = redo_count;
        self.statistics.recovered_transactions = analysis_result.committed_transactions.len() as u64;

        Ok(())
    }

    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é REDO
    async fn apply_redo_operation(&mut self, _lsn: LogSequenceNumber, operation: &LogRecord) -> Result<()> {
        match operation.record_type {
            LogRecordType::DataInsert => {
                // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                tokio::time::sleep(Duration::from_micros(10)).await;
            }
            LogRecordType::DataUpdate => {
                // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                tokio::time::sleep(Duration::from_micros(10)).await;
            }
            LogRecordType::DataDelete => {
                // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                tokio::time::sleep(Duration::from_micros(10)).await;
            }
            _ => {}
        }

        Ok(())
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ UNDO –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    async fn perform_undo_operations(&mut self, analysis_result: &LogAnalysisResult) -> Result<()> {
        let mut undo_count = 0;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏—Ö)
        for tx_info in analysis_result.active_transactions.values() {
            println!("   ‚Ü©Ô∏è  –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é {}", tx_info.id);

            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for operation in tx_info.operations.iter().rev() {
                if matches!(
                    operation.record_type,
                    LogRecordType::DataInsert | LogRecordType::DataUpdate | LogRecordType::DataDelete
                ) {
                    self.apply_undo_operation(operation).await?;
                    undo_count += 1;
                }
            }
        }

        self.statistics.undo_operations = undo_count;
        self.statistics.rolled_back_transactions = analysis_result.active_transactions.len() as u64;

        Ok(())
    }

    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é UNDO
    async fn apply_undo_operation(&mut self, operation: &LogRecord) -> Result<()> {
        match operation.record_type {
            LogRecordType::DataInsert => {
                // –î–ª—è INSERT –¥–µ–ª–∞–µ–º DELETE
                tokio::time::sleep(Duration::from_micros(10)).await;
            }
            LogRecordType::DataUpdate => {
                // –î–ª—è UPDATE –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                tokio::time::sleep(Duration::from_micros(10)).await;
            }
            LogRecordType::DataDelete => {
                // –î–ª—è DELETE –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                tokio::time::sleep(Duration::from_micros(10)).await;
            }
            _ => {}
        }

        Ok(())
    }

    /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    async fn validate_recovery(&mut self, analysis_result: &LogAnalysisResult) -> Result<()> {
        println!("   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å {} —Å—Ç—Ä–∞–Ω–∏—Ü", analysis_result.dirty_pages.len());

        let mut validated_pages = 0;
        for (file_id, page_id) in &analysis_result.dirty_pages {
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self.validate_page(*file_id, *page_id).await?;
            validated_pages += 1;

            if validated_pages % 100 == 0 {
                println!("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {} —Å—Ç—Ä–∞–Ω–∏—Ü", validated_pages);
            }
        }

        self.statistics.recovered_pages = validated_pages;

        Ok(())
    }

    /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
    async fn validate_page(&self, _file_id: u32, _page_id: PageId) -> Result<()> {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º,
        // —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
        tokio::time::sleep(Duration::from_micros(5)).await;
        Ok(())
    }

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    pub fn get_statistics(&self) -> &RecoveryStatistics {
        &self.statistics
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    pub async fn needs_recovery(&self, log_directory: &Path) -> Result<bool> {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞:
        // - –ù–∞–ª–∏—á–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        // - –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ª–æ–≥–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏
        // - –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        
        let log_files = self.get_log_files(log_directory)?;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥-—Ñ–∞–π–ª—ã, –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        Ok(!log_files.is_empty())
    }

    /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    pub async fn create_backup(&self, _data_directory: &Path, _backup_directory: &Path) -> Result<()> {
        if !self.config.create_backup {
            return Ok(());
        }

        println!("üíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö...");
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        tokio::time::sleep(Duration::from_millis(100)).await;
        
        println!("   ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞");
        
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::TempDir;

    #[tokio::test]
    async fn test_recovery_manager_creation() {
        let config = RecoveryConfig::default();
        let _manager = RecoveryManager::new(config);
    }

    #[tokio::test]
    async fn test_needs_recovery() -> Result<()> {
        let temp_dir = TempDir::new().unwrap();
        let config = RecoveryConfig::default();
        let manager = RecoveryManager::new(config);

        // –ü—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        let needs_recovery = manager.needs_recovery(temp_dir.path()).await?;
        assert!(!needs_recovery);

        Ok(())
    }

    #[tokio::test]
    async fn test_get_log_files() -> Result<()> {
        let temp_dir = TempDir::new().unwrap();
        let config = RecoveryConfig::default();
        let manager = RecoveryManager::new(config);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥-—Ñ–∞–π–ª
        let log_file_path = temp_dir.path().join("test.log");
        std::fs::write(&log_file_path, "test data")?;

        let log_files = manager.get_log_files(temp_dir.path())?;
        assert_eq!(log_files.len(), 1);
        assert_eq!(log_files[0].filename, "test.log");

        Ok(())
    }

    #[tokio::test]
    async fn test_log_analysis() -> Result<()> {
        use crate::logging::log_record::{LogRecord, IsolationLevel};
        
        let config = RecoveryConfig::default();
        let mut manager = RecoveryManager::new(config);

        let mut result = LogAnalysisResult {
            last_lsn: 0,
            checkpoint_lsn: None,
            active_transactions: HashMap::new(),
            committed_transactions: HashMap::new(),
            aborted_transactions: HashMap::new(),
            dirty_pages: HashSet::new(),
            total_records: 0,
        };

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø–∏—Å–∏ BEGIN
        let begin_record = LogRecord::new_transaction_begin(1, 100, IsolationLevel::ReadCommitted);
        manager.process_log_record(&mut result, begin_record).await?;

        assert_eq!(result.active_transactions.len(), 1);
        assert!(result.active_transactions.contains_key(&100));

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø–∏—Å–∏ COMMIT
        let commit_record = LogRecord::new_transaction_commit(2, 100, vec![], Some(1));
        manager.process_log_record(&mut result, commit_record).await?;

        assert_eq!(result.active_transactions.len(), 0);
        assert_eq!(result.committed_transactions.len(), 1);

        Ok(())
    }

    #[tokio::test]
    async fn test_backup_creation() -> Result<()> {
        let temp_dir = TempDir::new().unwrap();
        let backup_dir = TempDir::new().unwrap();
        
        let mut config = RecoveryConfig::default();
        config.create_backup = true;
        
        let manager = RecoveryManager::new(config);
        
        manager.create_backup(temp_dir.path(), backup_dir.path()).await?;
        
        Ok(())
    }

    #[tokio::test]
    async fn test_statistics() {
        let config = RecoveryConfig::default();
        let manager = RecoveryManager::new(config);
        
        let stats = manager.get_statistics();
        assert_eq!(stats.total_log_records, 0);
        assert_eq!(stats.redo_operations, 0);
        assert_eq!(stats.undo_operations, 0);
    }
}
