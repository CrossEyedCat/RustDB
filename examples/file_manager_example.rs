//! –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ rustdb
//!
//! –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
//! - –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//! - –ó–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
//! - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Ñ–∞–π–ª–æ–≤
//! - –†–∞–±–æ—Ç—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ñ–∞–π–ª–æ–≤

use rustdb::common::Result;
use rustdb::storage::file_manager::{FileManager, BLOCK_SIZE};
use tempfile::TempDir;

fn main() -> Result<()> {
    println!("=== –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ rustdb ===\n");

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    let temp_dir = TempDir::new().unwrap();
    let db_path = temp_dir.path();

    println!(
        "üìÅ –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {}",
        db_path.display()
    );
    let mut file_manager = FileManager::new(db_path)?;

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    println!("\nüóÑÔ∏è –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 'example.db'");
    let file_id = file_manager.create_file("example.db")?;
    println!("‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω —Å ID: {}", file_id);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    if let Some(file_info) = file_manager.get_file_info(file_id) {
        println!("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:");
        println!("   - –ü—É—Ç—å: {}", file_info.path.display());
        println!("   - –†–∞–∑–º–µ—Ä –≤ –±–ª–æ–∫–∞—Ö: {}", file_info.size_in_blocks());
        println!("   - –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –±–ª–æ–∫–æ–≤: {}", file_info.used_blocks());
        println!("   - –°–≤–æ–±–æ–¥–Ω—ã—Ö –±–ª–æ–∫–æ–≤: {}", file_info.free_blocks());
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
    println!("\nüìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–ª–æ–∫–∏:");

    // –ë–ª–æ–∫ 0: –°—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    let mut block0_data = vec![0u8; BLOCK_SIZE];
    let text = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! –≠—Ç–æ —Ç–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ rustdb.";
    let text_bytes = text.as_bytes();
    block0_data[..text_bytes.len()].copy_from_slice(text_bytes);
    file_manager.write_block(file_id, 0, &block0_data)?;
    println!("   ‚úÖ –ë–ª–æ–∫ 0: –∑–∞–ø–∏—Å–∞–Ω —Ç–µ–∫—Å—Ç '{}'", text);

    // –ë–ª–æ–∫ 1: –ß–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    let mut block1_data = vec![0u8; BLOCK_SIZE];
    for (i, byte) in block1_data.iter_mut().enumerate().take(256) {
        *byte = (i % 256) as u8;
    }
    file_manager.write_block(file_id, 1, &block1_data)?;
    println!("   ‚úÖ –ë–ª–æ–∫ 1: –∑–∞–ø–∏—Å–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–π—Ç–æ–≤ 0-255");

    // –ë–ª–æ–∫ 2: –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let block2_data: Vec<u8> = (0..BLOCK_SIZE)
        .map(|i| ((i * 7 + 13) % 256) as u8)
        .collect();
    file_manager.write_block(file_id, 2, &block2_data)?;
    println!("   ‚úÖ –ë–ª–æ–∫ 2: –∑–∞–ø–∏—Å–∞–Ω—ã –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥–∏—Å–∫
    println!("\nüíæ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥–∏—Å–∫");
    file_manager.sync_file(file_id)?;
    println!("   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    if let Some(file_info) = file_manager.get_file_info(file_id) {
        println!("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:");
        println!("   - –†–∞–∑–º–µ—Ä –≤ –±–ª–æ–∫–∞—Ö: {}", file_info.size_in_blocks());
        println!("   - –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –±–ª–æ–∫–æ–≤: {}", file_info.used_blocks());
        println!("   - –°–≤–æ–±–æ–¥–Ω—ã—Ö –±–ª–æ–∫–æ–≤: {}", file_info.free_blocks());
    }

    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ
    println!("\nüìñ –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–ª–æ–∫–æ–≤:");

    // –ß–∏—Ç–∞–µ–º –±–ª–æ–∫ 0
    let read_block0 = file_manager.read_block(file_id, 0)?;
    let text_end = read_block0
        .iter()
        .position(|&x| x == 0)
        .unwrap_or(text_bytes.len());
    let read_text = String::from_utf8_lossy(&read_block0[..text_end]);
    println!("   üìÑ –ë–ª–æ–∫ 0: '{}'", read_text);

    // –ß–∏—Ç–∞–µ–º –±–ª–æ–∫ 1
    let read_block1 = file_manager.read_block(file_id, 1)?;
    let first_10_bytes: Vec<u8> = read_block1[..10].to_vec();
    println!("   üî¢ –ë–ª–æ–∫ 1: –ø–µ—Ä–≤—ã–µ 10 –±–∞–π—Ç–æ–≤: {:?}", first_10_bytes);

    // –ß–∏—Ç–∞–µ–º –±–ª–æ–∫ 2
    let read_block2 = file_manager.read_block(file_id, 2)?;
    let checksum: u32 = read_block2.iter().map(|&x| x as u32).sum();
    println!("   üé≤ –ë–ª–æ–∫ 2: –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞: {}", checksum);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    println!("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:");
    let block1_valid = read_block1[..256]
        .iter()
        .enumerate()
        .all(|(i, &byte)| byte == (i % 256) as u8);
    println!("   ‚úÖ –ë–ª–æ–∫ 1 –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {}", block1_valid);

    let block2_valid = read_block2
        .iter()
        .enumerate()
        .all(|(i, &byte)| byte == ((i * 7 + 13) % 256) as u8);
    println!("   ‚úÖ –ë–ª–æ–∫ 2 –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {}", block2_valid);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
    println!("\nüö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª");
    file_manager.close_file(file_id)?;
    println!("   ‚úÖ –§–∞–π–ª –∑–∞–∫—Ä—ã—Ç");

    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    println!("\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏");
    let reopened_file_id = file_manager.open_file("example.db", false)?;
    println!("   ‚úÖ –§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç —Å ID: {}", reopened_file_id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    let persistent_block0 = file_manager.read_block(reopened_file_id, 0)?;
    let persistent_text_end = persistent_block0
        .iter()
        .position(|&x| x == 0)
        .unwrap_or(text_bytes.len());
    let persistent_text = String::from_utf8_lossy(&persistent_block0[..persistent_text_end]);
    println!("   üìÑ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞ 0: '{}'", persistent_text);

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
    println!("\nüìö –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º—É–ª—å—Ç–∏—Ñ–∞–π–ª–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã");
    let file2_id = file_manager.create_file("second.db")?;

    let file2_data = "–≠—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ç–æ—Ä–æ–º —Ñ–∞–π–ª–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!".as_bytes();
    let mut block_data = vec![0u8; BLOCK_SIZE];
    block_data[..file2_data.len()].copy_from_slice(file2_data);
    file_manager.write_block(file2_id, 0, &block_data)?;

    let read_file2_data = file_manager.read_block(file2_id, 0)?;
    let file2_text_end = read_file2_data
        .iter()
        .position(|&x| x == 0)
        .unwrap_or(file2_data.len());
    let file2_text = String::from_utf8_lossy(&read_file2_data[..file2_text_end]);
    println!("   üìÑ –î–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞: '{}'", file2_text);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
    let open_files = file_manager.list_open_files();
    println!("\nüìã –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: {:?}", open_files);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    println!("\nüö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã");
    file_manager.close_all()?;
    println!("   ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–∫—Ä—ã—Ç—ã");

    println!("\nüéâ –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!");
    println!("\n–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª:");
    println!("‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
    println!("‚Ä¢ –ó–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤");
    println!("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö");
    println!("‚Ä¢ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏");
    println!("‚Ä¢ –†–∞–±–æ—Ç—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ");
    println!("‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∏—Å–∫");

    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_file_manager_example() -> Result<()> {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ —Ç–µ—Å—Ç
        main()
    }

    #[test]
    fn test_multiple_files_operations() -> Result<()> {
        let temp_dir = TempDir::new().unwrap();
        let mut file_manager = FileManager::new(temp_dir.path())?;

        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
        let file1_id = file_manager.create_file("test1.db")?;
        let file2_id = file_manager.create_file("test2.db")?;
        let file3_id = file_manager.create_file("test3.db")?;

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for (i, &file_id) in [file1_id, file2_id, file3_id].iter().enumerate() {
            let data = vec![(i + 1) as u8; BLOCK_SIZE];
            file_manager.write_block(file_id, 0, &data)?;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã
        for (i, &file_id) in [file1_id, file2_id, file3_id].iter().enumerate() {
            let read_data = file_manager.read_block(file_id, 0)?;
            assert_eq!(read_data[0], (i + 1) as u8);
            assert!(read_data.iter().all(|&x| x == (i + 1) as u8));
        }

        file_manager.close_all()?;
        Ok(())
    }

    #[test]
    fn test_large_file_operations() -> Result<()> {
        let temp_dir = TempDir::new().unwrap();
        let mut file_manager = FileManager::new(temp_dir.path())?;

        let file_id = file_manager.create_file("large.db")?;

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–ª–æ–∫–∏ —Å –±–æ–ª—å—à–∏–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
        let block_indices = [0, 10, 100, 1000];

        for &block_id in &block_indices {
            let data = vec![(block_id % 256) as u8; BLOCK_SIZE];
            file_manager.write_block(file_id, block_id, &data)?;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ä–∏–ª—Å—è
        if let Some(file_info) = file_manager.get_file_info(file_id) {
            assert!(file_info.size_in_blocks() > 1000);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for &block_id in &block_indices {
            let read_data = file_manager.read_block(file_id, block_id)?;
            assert!(read_data.iter().all(|&x| x == (block_id % 256) as u8));
        }

        file_manager.close_file(file_id)?;
        Ok(())
    }
}
