//! –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å—é

use rustdb::core::concurrency::IsolationLevel as ConcIsolationLevel;
use rustdb::core::{
    ConcurrencyConfig, ConcurrencyManager, LockGranularity, ResourceType, RowKey, Timestamp,
    TransactionId,
};
use std::time::Duration;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("=== –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å—é ===\n");

    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    println!("1. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏");
    let config = ConcurrencyConfig {
        default_isolation_level: ConcIsolationLevel::ReadCommitted,
        default_lock_granularity: LockGranularity::Row,
        enable_mvcc: true,
        vacuum_interval: Duration::from_secs(30),
        ..Default::default()
    };
    let manager = ConcurrencyManager::new(config);
    println!("   ‚úì –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω —Å MVCC –∏ Row-level –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏\n");

    // 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è MVCC - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
    println!("2. –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –∑–∞–ø–∏—Å–∏");
    let key = RowKey::new(1, 100); // –¢–∞–±–ª–∏—Ü–∞ 1, –∑–∞–ø–∏—Å—å 100

    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 1: —Å–æ–∑–¥–∞—ë—Ç –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é
    let tx1 = TransactionId::new(1);
    let snapshot1 = manager.begin_transaction(tx1, ConcIsolationLevel::ReadCommitted)?;
    println!("   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {} –Ω–∞—á–∞—Ç–∞", tx1);

    let data_v1 = b"Alice, age: 25, salary: 50000".to_vec();
    manager.write(tx1, key.clone(), data_v1).await?;
    println!("   ‚úì –í–µ—Ä—Å–∏—è 1 —Å–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π {}", tx1);

    manager.commit_transaction(tx1)?;
    println!("   ‚úì –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞\n", tx1);

    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 2: —Å–æ–∑–¥–∞—ë—Ç –≤—Ç–æ—Ä—É—é –≤–µ—Ä—Å–∏—é
    let tx2 = TransactionId::new(2);
    manager.begin_transaction(tx2, ConcIsolationLevel::ReadCommitted)?;
    println!("   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {} –Ω–∞—á–∞—Ç–∞", tx2);

    let data_v2 = b"Alice, age: 26, salary: 55000".to_vec();
    manager.write(tx2, key.clone(), data_v2).await?;
    println!("   ‚úì –í–µ—Ä—Å–∏—è 2 —Å–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π {}", tx2);

    manager.commit_transaction(tx2)?;
    println!("   ‚úì –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞\n", tx2);

    // 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    println!("3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–æ–ª—è—Ü–∏–∏");

    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 3 —á–∏—Ç–∞–µ—Ç —Å snapshot –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    let tx3 = TransactionId::new(3);
    manager.begin_transaction(tx3, ConcIsolationLevel::ReadCommitted)?;
    let old_data = manager.read(tx3, &key, snapshot1).await?;
    if let Some(data) = old_data {
        println!(
            "   TX3 —á–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é: {:?}",
            String::from_utf8_lossy(&data)
        );
    }

    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 4 —á–∏—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º snapshot
    let tx4 = TransactionId::new(4);
    let snapshot2 = Timestamp::now();
    manager.begin_transaction(tx4, ConcIsolationLevel::ReadCommitted)?;
    let new_data = manager.read(tx4, &key, snapshot2).await?;
    if let Some(data) = new_data {
        println!(
            "   TX4 —á–∏—Ç–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é: {:?}",
            String::from_utf8_lossy(&data)
        );
    }
    println!();

    // 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    println!("4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫");
    let tx5 = TransactionId::new(5);
    let resource = ResourceType::Record(1, 200);

    // –ü–æ–ª—É—á–∞–µ–º exclusive –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    manager
        .acquire_write_lock(tx5, resource.clone(), Some(Duration::from_millis(100)))
        .await?;
    println!("   ‚úì –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {} –ø–æ–ª—É—á–∏–ª–∞ exclusive –±–ª–æ–∫–∏—Ä–æ–≤–∫—É", tx5);

    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 6 –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç—É –∂–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    let tx6 = TransactionId::new(6);
    match manager
        .acquire_write_lock(tx6, resource.clone(), Some(Duration::from_millis(10)))
        .await
    {
        Ok(_) => println!("   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {} –ø–æ–ª—É—á–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É", tx6),
        Err(_) => println!(
            "   ‚úì –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {} –Ω–µ —Å–º–æ–≥–ª–∞ –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (—Ç–∞–π–º–∞—É—Ç)",
            tx6
        ),
    }

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    manager.commit_transaction(tx5)?;
    println!("   ‚úì –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {} –æ—Å–≤–æ–±–æ–¥–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É\n", tx5);

    // 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    println!("5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
    let tx7 = TransactionId::new(7);
    let key2 = RowKey::new(1, 101);
    let data_tx7 = b"Bob, age: 30".to_vec();

    manager.begin_transaction(tx7, ConcIsolationLevel::ReadCommitted)?;
    manager.write(tx7, key2.clone(), data_tx7).await?;
    println!("   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {} —Å–æ–∑–¥–∞–ª–∞ –≤–µ—Ä—Å–∏—é", tx7);

    manager.abort_transaction(tx7)?;
    println!("   ‚úì –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {} –æ—Ç–∫–∞—á–µ–Ω–∞ (–≤–µ—Ä—Å–∏—è —É–¥–∞–ª–µ–Ω–∞)\n", tx7);

    // 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    println!("6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã");
    let lock_stats = manager.get_lock_statistics();
    println!("   –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏:");
    println!("     –í—Å–µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {}", lock_stats.total_locks);
    println!("     –¢–∞–π–º–∞—É—Ç–æ–≤: {}", lock_stats.lock_timeouts);
    println!(
        "     Deadlock'–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {}",
        lock_stats.deadlocks_detected
    );

    let mvcc_stats = manager.get_mvcc_statistics();
    println!("\n   MVCC:");
    println!("     –í—Å–µ–≥–æ –≤–µ—Ä—Å–∏–π: {}", mvcc_stats.total_versions);
    println!("     –ê–∫—Ç–∏–≤–Ω—ã—Ö: {}", mvcc_stats.active_versions);
    println!("     –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {}", mvcc_stats.committed_versions);
    println!("     –û—Ç–∫–∞—á–µ–Ω–Ω—ã—Ö: {}", mvcc_stats.aborted_versions);

    // 7. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π (VACUUM)
    println!("\n7. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π (VACUUM)");
    manager.update_min_active_transaction(TransactionId::new(100));
    let cleaned = manager.vacuum()?;
    println!("   ‚úì –û—á–∏—â–µ–Ω–æ –≤–µ—Ä—Å–∏–π: {}", cleaned);

    let mvcc_stats = manager.get_mvcc_statistics();
    println!("   –í–µ—Ä—Å–∏–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {}", mvcc_stats.total_versions);
    println!("   –û–ø–µ—Ä–∞—Ü–∏–π VACUUM: {}", mvcc_stats.vacuum_operations);

    // 8. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∏–∑–æ–ª—è—Ü–∏–∏
    println!("\n8. –£—Ä–æ–≤–Ω–∏ –∏–∑–æ–ª—è—Ü–∏–∏");
    println!("   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏:");
    println!("     - ReadUncommitted (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è)");
    println!("     - ReadCommitted (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)");
    println!("     - RepeatableRead (–ø–æ–≤—Ç–æ—Ä—è–µ–º–æ–µ —á—Ç–µ–Ω–∏–µ)");
    println!("     - Serializable (–ø–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è)");

    // 9. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä–∞–Ω—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    println!("\n9. –ì—Ä–∞–Ω—É–ª—è—Ä–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫");
    println!("   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏:");
    println!("     - Database (–≤—Å—è –ë–î)");
    println!("     - Table (—Ç–∞–±–ª–∏—Ü–∞)");
    println!("     - Page (—Å—Ç—Ä–∞–Ω–∏—Ü–∞)");
    println!("     - Row (—Å—Ç—Ä–æ–∫–∞) [—Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º]");

    println!("\n=== –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ ===");
    println!("\nüìù –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:");
    println!("  ‚úì MVCC –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —á—Ç–µ–Ω–∏—è");
    println!("  ‚úì Deadlock detection —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –∂–µ—Ä—Ç–≤—ã");
    println!("  ‚úì Timeout –º–µ—Ö–∞–Ω–∏–∑–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–∫–∞—Ç–æ–º");
    println!("  ‚úì –ì—Ä–∞–Ω—É–ª—è—Ä–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (Row/Page/Table/Database)");
    println!("  ‚úì VACUUM –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π");
    println!("  ‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∏–∑–æ–ª—è—Ü–∏–∏");

    Ok(())
}
