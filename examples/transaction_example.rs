//! –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π rustdb
//!
//! –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:
//! - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
//! - –†–∞–±–æ—Ç–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏
//! - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
//! - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

use rustdb::core::{
    IsolationLevel, LockMode, LockType, TransactionManager, TransactionManagerConfig,
};
use std::sync::Arc;
use std::thread;
use std::time::Duration;

fn main() {
    println!("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π rustdb\n");

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    basic_transaction_operations();

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏
    lock_operations_demo();

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    concurrent_transactions_demo();

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∏–∑–æ–ª—è—Ü–∏–∏
    isolation_levels_demo();

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    statistics_demo();

    println!("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
}

fn basic_transaction_operations() {
    println!("üìã 1. –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏");
    println!("=====================================");

    let tm = TransactionManager::new().unwrap();

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let txn_id = tm
        .begin_transaction(IsolationLevel::ReadCommitted, false)
        .unwrap();
    println!("   ‚úì –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {}", txn_id);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let info = tm.get_transaction_info(txn_id).unwrap().unwrap();
    println!("   ‚úì –£—Ä–æ–≤–µ–Ω—å –∏–∑–æ–ª—è—Ü–∏–∏: {:?}", info.isolation_level);
    println!("   ‚úì –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è: {}", info.read_only);
    println!("   ‚úì –°–æ—Å—Ç–æ—è–Ω–∏–µ: {:?}", info.state);

    // –§–∏–∫—Å–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    tm.commit_transaction(txn_id).unwrap();
    println!("   ‚úì –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞\n");
}

fn lock_operations_demo() {
    println!("üîí 2. –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏");
    println!("=============================");

    let tm = TransactionManager::new().unwrap();
    let txn_id = tm
        .begin_transaction(IsolationLevel::ReadCommitted, false)
        .unwrap();

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    let resources = vec![
        (
            "users_table",
            LockType::Table("users".to_string()),
            LockMode::Shared,
        ),
        (
            "user_email_index",
            LockType::Index("idx_user_email".to_string()),
            LockMode::Shared,
        ),
        ("user_record_1", LockType::Record(1, 1), LockMode::Exclusive),
        (
            "temp_resource",
            LockType::Resource("temp".to_string()),
            LockMode::Exclusive,
        ),
    ];

    for (name, lock_type, lock_mode) in &resources {
        tm.acquire_lock(
            txn_id,
            name.to_string(),
            lock_type.clone(),
            lock_mode.clone(),
        )
        .unwrap();
        println!("   ‚úì –ü–æ–ª—É—á–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ {:?} –Ω–∞ {}", lock_mode, name);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    let info = tm.get_transaction_info(txn_id).unwrap().unwrap();
    println!(
        "   ‚úì –í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {}",
        info.locked_resources.len()
    );

    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ–¥–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    tm.release_lock(txn_id, "temp_resource".to_string())
        .unwrap();
    println!("   ‚úì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ temp_resource");

    // –ü—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    tm.commit_transaction(txn_id).unwrap();
    println!("   ‚úì –í—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏\n");
}

fn concurrent_transactions_demo() {
    println!("üîÑ 3. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
    println!("=============================");

    let tm = Arc::new(TransactionManager::new().unwrap());
    let mut handles = vec![];

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    for i in 0..4 {
        let tm_clone = Arc::clone(&tm);
        let handle = thread::spawn(move || {
            let txn_id = tm_clone
                .begin_transaction(IsolationLevel::ReadCommitted, false)
                .unwrap();
            println!("   üîµ –ü–æ—Ç–æ–∫ {}: –ù–∞—á–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {}", i, txn_id);

            // –ö–∞–∂–¥–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å–≤–æ–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
            let shared_resource = "shared_data".to_string();
            let unique_resource = format!("data_partition_{}", i);

            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–¥–µ–ª—è–µ–º—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ –æ–±—â–∏–π —Ä–µ—Å—É—Ä—Å
            tm_clone
                .acquire_lock(
                    txn_id,
                    shared_resource,
                    LockType::Resource("shared".to_string()),
                    LockMode::Shared,
                )
                .unwrap();

            // –ü–æ–ª—É—á–∞–µ–º –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å
            tm_clone
                .acquire_lock(
                    txn_id,
                    unique_resource.clone(),
                    LockType::Resource(format!("partition_{}", i)),
                    LockMode::Exclusive,
                )
                .unwrap();

            println!("   üü¢ –ü–æ—Ç–æ–∫ {}: –ü–æ–ª—É—á–µ–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", i);

            // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
            thread::sleep(Duration::from_millis(100));

            // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            tm_clone.commit_transaction(txn_id).unwrap();
            println!("   ‚úÖ –ü–æ—Ç–æ–∫ {}: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞", i);
        });
        handles.push(handle);
    }

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for handle in handles {
        handle.join().unwrap();
    }

    println!("   ‚úì –í—Å–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã\n");
}

fn isolation_levels_demo() {
    println!("üéØ 4. –£—Ä–æ–≤–Ω–∏ –∏–∑–æ–ª—è—Ü–∏–∏");
    println!("====================");

    let tm = TransactionManager::new().unwrap();

    let levels = vec![
        (
            IsolationLevel::ReadUncommitted,
            "–ß—Ç–µ–Ω–∏–µ –Ω–µ–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        ),
        (
            IsolationLevel::ReadCommitted,
            "–ß—Ç–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        ),
        (IsolationLevel::RepeatableRead, "–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ–µ —á—Ç–µ–Ω–∏–µ"),
        (IsolationLevel::Serializable, "–°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º–æ—Å—Ç—å"),
    ];

    for (level, description) in levels {
        let txn_id = tm.begin_transaction(level.clone(), false).unwrap();
        println!("   ‚úì {:?}: {}", level, description);

        // –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (–ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è)
        tm.acquire_lock(
            txn_id,
            format!("resource_{:?}", level),
            LockType::Resource("demo".to_string()),
            LockMode::Shared,
        )
        .unwrap();

        tm.commit_transaction(txn_id).unwrap();
    }

    println!("   ‚úì –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –∏–∑–æ–ª—è—Ü–∏–∏\n");
}

fn statistics_demo() {
    println!("üìä 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥");
    println!("=============================");

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    let config = TransactionManagerConfig {
        max_concurrent_transactions: 10,
        lock_timeout_ms: 5000,
        deadlock_detection_interval_ms: 500,
        max_idle_time_seconds: 1800,
        enable_deadlock_detection: true,
    };

    let tm = TransactionManager::with_config(config).unwrap();

    println!("   üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:");
    let cfg = tm.get_config();
    println!(
        "      ‚Ä¢ –ú–∞–∫—Å. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}",
        cfg.max_concurrent_transactions
    );
    println!("      ‚Ä¢ –¢–∞–π–º–∞—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {} –º—Å", cfg.lock_timeout_ms);
    println!(
        "      ‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ–¥–ª–æ–∫–æ–≤: {}",
        cfg.enable_deadlock_detection
    );

    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let mut transaction_ids = Vec::new();

    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    for i in 0..5 {
        let read_only = i % 2 == 0;
        let txn_id = tm
            .begin_transaction(IsolationLevel::ReadCommitted, read_only)
            .unwrap();
        transaction_ids.push(txn_id);

        // –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        tm.acquire_lock(
            txn_id,
            format!("resource_{}", i),
            LockType::Resource(format!("r{}", i)),
            LockMode::Shared,
        )
        .unwrap();
    }

    // –§–∏–∫—Å–∏—Ä—É–µ–º —á–∞—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –æ—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    for (i, &txn_id) in transaction_ids.iter().enumerate() {
        if i % 2 == 0 {
            tm.commit_transaction(txn_id).unwrap();
        } else {
            tm.abort_transaction(txn_id).unwrap();
        }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let stats = tm.get_statistics().unwrap();
    println!("\n   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("      ‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}", stats.total_transactions);
    println!("      ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}", stats.active_transactions);
    println!("      ‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {}", stats.committed_transactions);
    println!("      ‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: {}", stats.aborted_transactions);
    println!("      ‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è: {}", stats.lock_operations);
    println!(
        "      ‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è: {}",
        stats.unlock_operations
    );
    println!("      ‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–µ–¥–ª–æ–∫–æ–≤: {}", stats.deadlocks_detected);

    println!("\n   ‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞\n");
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_example_runs_without_panic() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–º–µ—Ä –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –ø–∞–Ω–∏–∫–∏
        basic_transaction_operations();
        lock_operations_demo();
        isolation_levels_demo();
        statistics_demo();
    }
}
