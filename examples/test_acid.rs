// –ü—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö ACID —Ç–µ—Å—Ç–æ–≤
use rustdb::core::advanced_lock_manager::{AdvancedLockConfig, AdvancedLockManager};
use rustdb::core::concurrency::{ConcurrencyConfig, ConcurrencyManager};
use rustdb::core::{AdvancedLockMode, ResourceType, RowKey, Timestamp, TransactionId};
use std::sync::Arc;
use std::time::Duration;
// removed redundant single-component import

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö ACID —Ç–µ—Å—Ç–æ–≤");

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    let config = AdvancedLockConfig::default();
    let lock_manager = Arc::new(AdvancedLockManager::new(config));

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    let concurrency_config = ConcurrencyConfig::default();
    let concurrency_manager = ConcurrencyManager::new(concurrency_config);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    let tx1 = TransactionId(1);
    let tx2 = TransactionId(2);
    let resource = ResourceType::Record(1, 100);

    println!("‚úÖ –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏");
    let result1 = lock_manager
        .acquire_lock(
            tx1,
            resource.clone(),
            AdvancedLockMode::Exclusive,
            Some(Duration::from_millis(100)),
        )
        .await;

    match result1 {
        Ok(_) => println!("   ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"),
        Err(e) => println!("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {}", e),
    }

    println!("‚úÖ –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É");
    let result2 = lock_manager
        .acquire_lock(
            tx2,
            resource.clone(),
            AdvancedLockMode::Exclusive,
            Some(Duration::from_millis(50)),
        )
        .await;

    match result2 {
        Ok(_) => println!("   ‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)"),
        Err(_) => println!("   ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ (–∫–æ–Ω—Ñ–ª–∏–∫—Ç)"),
    }

    println!("‚úÖ –¢–µ—Å—Ç 3: –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏");
    let result3 = lock_manager.release_lock(tx1, resource.clone());
    match result3 {
        Ok(_) => println!("   ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"),
        Err(e) => println!("   ‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {}", e),
    }

    println!("‚úÖ –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è");
    let result4 = lock_manager
        .acquire_lock(
            tx2,
            resource.clone(),
            AdvancedLockMode::Exclusive,
            Some(Duration::from_millis(100)),
        )
        .await;

    match result4 {
        Ok(_) => println!("   ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è"),
        Err(e) => println!("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {}", e),
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º ConcurrencyManager
    println!("‚úÖ –¢–µ—Å—Ç 5: ConcurrencyManager - –∑–∞–ø–∏—Å—å");
    let row_key = RowKey {
        table_id: 1,
        row_id: 100,
    };
    let write_result = concurrency_manager
        .write(tx1, row_key.clone(), b"test data".to_vec())
        .await;

    match write_result {
        Ok(_) => println!("   ‚úÖ –ó–∞–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"),
        Err(e) => println!("   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {}", e),
    }

    println!("‚úÖ –¢–µ—Å—Ç 6: ConcurrencyManager - —á—Ç–µ–Ω–∏–µ");
    let read_result = concurrency_manager
        .read(tx2, &row_key, Timestamp::now())
        .await;

    match read_result {
        Ok(data) => println!("   ‚úÖ –ß—Ç–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {:?}", data),
        Err(e) => println!("   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {}", e),
    }

    println!("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
    println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    let stats = lock_manager.get_statistics();
    println!("   - –í—Å–µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {}", stats.total_locks);
    println!("   - –û–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}", stats.waiting_transactions);
    println!("   - Deadlock'–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {}", stats.deadlocks_detected);

    Ok(())
}
