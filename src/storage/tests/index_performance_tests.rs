//! –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤ rustdb
//!
//! –≠—Ç–∏ —Ç–µ—Å—Ç—ã –∏–∑–º–µ—Ä—è—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
//! –∏ –ø–æ–º–æ–≥–∞—é—Ç –≤—ã—è–≤–∏—Ç—å —É–∑–∫–∏–µ –º–µ—Å—Ç–∞ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.

use crate::storage::index::{BPlusTree, Index, SimpleHashIndex};
use std::time::{Duration, Instant};

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–∞
#[derive(Debug)]
struct BenchmarkResult {
    operation: String,
    index_type: String,
    elements: usize,
    duration: Duration,
    ops_per_second: f64,
}

impl BenchmarkResult {
    fn new(operation: &str, index_type: &str, elements: usize, duration: Duration) -> Self {
        let ops_per_second = if duration.as_secs_f64() > 0.0 {
            elements as f64 / duration.as_secs_f64()
        } else {
            0.0
        };

        Self {
            operation: operation.to_string(),
            index_type: index_type.to_string(),
            elements,
            duration,
            ops_per_second,
        }
    }

    fn print(&self) {
        println!(
            "  {} - {}: {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ {:?} ({:.0} ops/sec)",
            self.index_type, self.operation, self.elements, self.duration, self.ops_per_second
        );
    }
}

#[test]
fn test_insertion_performance() {
    println!("üöÄ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å—Ç–∞–≤–∫–∏:");

    let test_sizes = [100, 1_000, 10_000];
    let mut results = Vec::new();

    for &size in &test_sizes {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º B+ –¥–µ—Ä–µ–≤–æ
        let mut btree: BPlusTree<i32, String> = BPlusTree::new_default();
        let start = Instant::now();

        for i in 1..=size {
            btree.insert(i as i32, format!("value_{}", i)).unwrap();
        }

        let btree_duration = start.elapsed();
        results.push(BenchmarkResult::new(
            "–≤—Å—Ç–∞–≤–∫–∞",
            "B+ –¥–µ—Ä–µ–≤–æ",
            size,
            btree_duration,
        ));

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö–µ—à-–∏–Ω–¥–µ–∫—Å
        let mut hash_index: SimpleHashIndex<i32, String> = SimpleHashIndex::with_capacity(size);
        let start = Instant::now();

        for i in 1..=size {
            hash_index.insert(i as i32, format!("value_{}", i)).unwrap();
        }

        let hash_duration = start.elapsed();
        results.push(BenchmarkResult::new(
            "–≤—Å—Ç–∞–≤–∫–∞",
            "–•–µ—à-–∏–Ω–¥–µ–∫—Å",
            size,
            hash_duration,
        ));
    }

    for result in &results {
        result.print();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è
    for result in &results {
        assert!(
            result.ops_per_second > 1000.0,
            "–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞: {:.0} ops/sec",
            result.ops_per_second
        );
    }
}

#[test]
fn test_search_performance() {
    println!("üîç –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞:");

    const SIZE: usize = 10_000;
    let mut results = Vec::new();

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º B+ –¥–µ—Ä–µ–≤–æ
    let mut btree: BPlusTree<i32, String> = BPlusTree::new_default();
    for i in 1..=SIZE {
        btree.insert(i as i32, format!("value_{}", i)).unwrap();
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ö–µ—à-–∏–Ω–¥–µ–∫—Å
    let mut hash_index: SimpleHashIndex<i32, String> = SimpleHashIndex::with_capacity(SIZE);
    for i in 1..=SIZE {
        hash_index.insert(i as i32, format!("value_{}", i)).unwrap();
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
    let start = Instant::now();
    for i in 1..=SIZE {
        let _ = btree.search(&(i as i32)).unwrap();
    }
    let btree_sequential = start.elapsed();
    results.push(BenchmarkResult::new(
        "–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫",
        "B+ –¥–µ—Ä–µ–≤–æ",
        SIZE,
        btree_sequential,
    ));

    let start = Instant::now();
    for i in 1..=SIZE {
        let _ = hash_index.search(&(i as i32)).unwrap();
    }
    let hash_sequential = start.elapsed();
    results.push(BenchmarkResult::new(
        "–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫",
        "–•–µ—à-–∏–Ω–¥–µ–∫—Å",
        SIZE,
        hash_sequential,
    ));

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–∏—Å–∫
    let random_keys: Vec<i32> = (1..=SIZE).map(|i| ((i * 7919) % SIZE + 1) as i32).collect();

    let start = Instant::now();
    for &key in &random_keys {
        let _ = btree.search(&key).unwrap();
    }
    let btree_random = start.elapsed();
    results.push(BenchmarkResult::new(
        "—Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–∏—Å–∫",
        "B+ –¥–µ—Ä–µ–≤–æ",
        SIZE,
        btree_random,
    ));

    let start = Instant::now();
    for &key in &random_keys {
        let _ = hash_index.search(&key).unwrap();
    }
    let hash_random = start.elapsed();
    results.push(BenchmarkResult::new(
        "—Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–∏—Å–∫",
        "–•–µ—à-–∏–Ω–¥–µ–∫—Å",
        SIZE,
        hash_random,
    ));

    for result in &results {
        result.print();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    for result in &results {
        assert!(
            result.ops_per_second > 10_000.0,
            "–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {:.0} ops/sec",
            result.ops_per_second
        );
    }
}

#[test]
fn test_range_query_performance() {
    println!("üìä –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:");

    const SIZE: usize = 10_000;
    let mut btree: BPlusTree<i32, String> = BPlusTree::new_default();

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for i in 1..=SIZE {
        btree.insert(i as i32, format!("value_{}", i)).unwrap();
    }

    let range_sizes = [10, 100, 1_000, 5_000];

    for &range_size in &range_sizes {
        let start_key = (SIZE / 2 - range_size / 2) as i32;
        let end_key = (SIZE / 2 + range_size / 2) as i32;

        let start = Instant::now();
        let results = btree.range_search(&start_key, &end_key).unwrap();
        let duration = start.elapsed();

        println!(
            "  –î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–æ–º {}: {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {:?}",
            range_size,
            results.len(),
            duration
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        assert!(results.len() <= range_size + 1); // +1 –∏–∑-–∑–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü
        assert!(duration.as_millis() < 100); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ
    }
}

#[test]
fn test_deletion_performance() {
    println!("üóëÔ∏è –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è:");

    const SIZE: usize = 10_000;
    let mut results = Vec::new();

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ö–µ—à-–∏–Ω–¥–µ–∫—Å
    let mut hash_index: SimpleHashIndex<i32, String> = SimpleHashIndex::with_capacity(SIZE);
    for i in 1..=SIZE {
        hash_index.insert(i as i32, format!("value_{}", i)).unwrap();
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    let keys_to_delete: Vec<i32> = (1..=SIZE).step_by(2).map(|i| i as i32).collect();
    let delete_count = keys_to_delete.len();

    let start = Instant::now();
    for &key in &keys_to_delete {
        hash_index.delete(&key).unwrap();
    }
    let deletion_duration = start.elapsed();

    results.push(BenchmarkResult::new(
        "—É–¥–∞–ª–µ–Ω–∏–µ",
        "–•–µ—à-–∏–Ω–¥–µ–∫—Å",
        delete_count,
        deletion_duration,
    ));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω—ã
    for &key in &keys_to_delete {
        assert_eq!(hash_index.search(&key).unwrap(), None);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ
    for i in (2..=SIZE).step_by(2) {
        assert!(hash_index.search(&(i as i32)).unwrap().is_some());
    }

    for result in &results {
        result.print();
    }

    assert_eq!(hash_index.size(), SIZE - delete_count);
}

#[test]
fn test_mixed_operations_performance() {
    println!("üîÑ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:");

    const OPERATIONS: usize = 10_000;
    let mut hash_index: SimpleHashIndex<i32, String> = SimpleHashIndex::new();

    let start = Instant::now();

    for i in 0..OPERATIONS {
        match i % 4 {
            0 => {
                // –í—Å—Ç–∞–≤–∫–∞
                hash_index.insert(i as i32, format!("value_{}", i)).unwrap();
            }
            1 => {
                // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                if i > 0 {
                    let _ = hash_index.search(&((i - 1) as i32)).unwrap();
                }
            }
            2 => {
                // –ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                let _ = hash_index.search(&(-1)).unwrap();
            }
            3 => {
                // –£–¥–∞–ª–µ–Ω–∏–µ
                if i > 3 {
                    hash_index.delete(&((i - 3) as i32)).unwrap();
                }
            }
            _ => unreachable!(),
        }
    }

    let total_duration = start.elapsed();
    let ops_per_second = OPERATIONS as f64 / total_duration.as_secs_f64();

    println!(
        "  –°–º–µ—à–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {} –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {:?} ({:.0} ops/sec)",
        OPERATIONS, total_duration, ops_per_second
    );

    assert!(
        ops_per_second > 50_000.0,
        "–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å–º–µ—à–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {:.0} ops/sec",
        ops_per_second
    );
}

#[test]
fn test_memory_usage_scaling() {
    println!("üíæ –¢–µ—Å—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏:");

    use std::mem;

    let sizes = [100, 1_000, 10_000];

    for &size in &sizes {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º B+ –¥–µ—Ä–µ–≤–æ
        let mut btree: BPlusTree<i32, String> = BPlusTree::new_default();
        for i in 1..=size {
            btree.insert(i as i32, format!("value_{:06}", i)).unwrap();
        }

        let btree_size = mem::size_of_val(&btree);
        println!(
            "  B+ –¥–µ—Ä–µ–≤–æ —Å {} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏: ~{} –±–∞–π—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
            size, btree_size
        );

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö–µ—à-–∏–Ω–¥–µ–∫—Å
        let mut hash_index: SimpleHashIndex<i32, String> = SimpleHashIndex::new();
        for i in 1..=size {
            hash_index
                .insert(i as i32, format!("value_{:06}", i))
                .unwrap();
        }

        let hash_size = mem::size_of_val(&hash_index);
        println!(
            "  –•–µ—à-–∏–Ω–¥–µ–∫—Å —Å {} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏: ~{} –±–∞–π—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
            size, hash_size
        );

        // –ë–∞–∑–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–∏–ª—å–Ω–æ —Ä–∞—Å—Ç–∏
        assert!(btree_size < 1024);
        assert!(hash_size < 1024);
    }
}

#[test]
fn test_cache_efficiency() {
    println!("‚ö° –¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–µ—à–∞:");

    const SIZE: usize = 100_000;
    let mut btree: BPlusTree<i32, i32> = BPlusTree::new_default();

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
    for i in 1..=SIZE {
        btree.insert(i as i32, i as i32).unwrap();
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø)
    let start = Instant::now();
    for i in 1..=SIZE {
        let _ = btree.search(&(i as i32)).unwrap();
    }
    let sequential_duration = start.elapsed();

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–æ—Å—Ç—É–ø
    let random_keys: Vec<i32> = (1..=SIZE)
        .map(|i| ((i * 31337) % SIZE + 1) as i32)
        .collect();
    let start = Instant::now();
    for &key in &random_keys {
        let _ = btree.search(&key).unwrap();
    }
    let random_duration = start.elapsed();

    println!("  –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: {:?}", sequential_duration);
    println!("  –°–ª—É—á–∞–π–Ω—ã–π –¥–æ—Å—Ç—É–ø: {:?}", random_duration);

    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ (–ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à)
    let sequential_ops_per_sec = SIZE as f64 / sequential_duration.as_secs_f64();
    let random_ops_per_sec = SIZE as f64 / random_duration.as_secs_f64();

    println!("  –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π: {:.0} ops/sec", sequential_ops_per_sec);
    println!("  –°–ª—É—á–∞–π–Ω—ã–π: {:.0} ops/sec", random_ops_per_sec);

    // –û–±–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä—ã–º–∏
    assert!(sequential_ops_per_sec > 100_000.0);
    assert!(random_ops_per_sec > 50_000.0);
}
