//! –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü rustdb
//! 
//! –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ PageManager:
//! - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
//! - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤—Å—Ç–∞–≤–∫–∞, —á—Ç–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
//! - Batch –æ–ø–µ—Ä–∞—Ü–∏–∏
//! - –î–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
//! - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

use rustdb::storage::page_manager::{PageManager, PageManagerConfig};
use std::path::Path;
use tempfile::TempDir;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üóÑÔ∏è  –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PageManager rustdb");
    println!("{}", "=".repeat(50));
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    let temp_dir = TempDir::new()?;
    let data_dir = temp_dir.path().to_path_buf();
    println!("üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {:?}", data_dir);
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ PageManager
    demo_create_page_manager(&data_dir)?;
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
    demo_crud_operations(&data_dir)?;
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º batch –æ–ø–µ—Ä–∞—Ü–∏–∏
    demo_batch_operations(&data_dir)?;
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—é
    demo_defragmentation(&data_dir)?;
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    demo_open_existing_manager(&data_dir)?;
    
    println!("\n‚úÖ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    
    Ok(())
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ PageManager —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
fn demo_create_page_manager(data_dir: &Path) -> Result<(), Box<dyn std::error::Error>> {
    println!("\nüîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è PageManager");
    println!("{}", "-".repeat(30));
    
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let default_config = PageManagerConfig::default();
    println!("üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:");
    println!("   - max_fill_factor: {}", default_config.max_fill_factor);
    println!("   - min_fill_factor: {}", default_config.min_fill_factor);
    println!("   - preallocation_buffer_size: {}", default_config.preallocation_buffer_size);
    println!("   - enable_compression: {}", default_config.enable_compression);
    println!("   - batch_size: {}", default_config.batch_size);
    
    let manager_result = PageManager::new(data_dir.to_path_buf(), "demo_table", default_config);
    match manager_result {
        Ok(_manager) => {
            println!("‚úÖ PageManager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
        },
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PageManager: {}", e);
            return Ok(()); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    let custom_config = PageManagerConfig {
        max_fill_factor: 0.85,
        min_fill_factor: 0.25,
        preallocation_buffer_size: 20,
        enable_compression: true,
        batch_size: 200,
    };
    
    println!("\nüìä –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:");
    println!("   - max_fill_factor: {}", custom_config.max_fill_factor);
    println!("   - min_fill_factor: {}", custom_config.min_fill_factor);
    println!("   - preallocation_buffer_size: {}", custom_config.preallocation_buffer_size);
    println!("   - enable_compression: {}", custom_config.enable_compression);
    println!("   - batch_size: {}", custom_config.batch_size);
    
    let custom_manager_result = PageManager::new(data_dir.to_path_buf(), "custom_table", custom_config);
    match custom_manager_result {
        Ok(_manager) => {
            println!("‚úÖ PageManager —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
        },
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ PageManager: {}", e);
        }
    }
    
    Ok(())
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
fn demo_crud_operations(data_dir: &Path) -> Result<(), Box<dyn std::error::Error>> {
    println!("\nüìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π");
    println!("{}", "-".repeat(30));
    
    let config = PageManagerConfig::default();
    let manager_result = PageManager::new(data_dir.to_path_buf(), "crud_table", config);
    
    let mut manager = match manager_result {
        Ok(mgr) => mgr,
        Err(e) => {
            println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PageManager: {}", e);
            return Ok(());
        }
    };
    
    // CREATE (INSERT) –æ–ø–µ—Ä–∞—Ü–∏–∏
    println!("üì• –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π:");
    let records = [
        "Alice Johnson - Software Engineer".as_bytes(),
        "Bob Smith - Data Analyst".as_bytes(), 
        "Carol Davis - Project Manager".as_bytes(),
        "David Wilson - DevOps Engineer".as_bytes(),
    ];
    
    let mut record_ids = Vec::new();
    for (i, record) in records.iter().enumerate() {
        match manager.insert(record) {
            Ok(insert_result) => {
                println!("   ‚úÖ –ó–∞–ø–∏—Å—å {}: ID {}, –°—Ç—Ä–∞–Ω–∏—Ü–∞ {}", 
                    i + 1, insert_result.record_id, insert_result.page_id);
                record_ids.push(insert_result.record_id);
            },
            Err(e) => {
                println!("   ‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ {}: {}", i + 1, e);
            }
        }
    }
    
    // READ (SELECT) –æ–ø–µ—Ä–∞—Ü–∏–∏
    println!("\nüì§ –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π:");
    match manager.select(None) {
        Ok(all_records) => {
            println!("   üìä –ù–∞–π–¥–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π:", all_records.len());
            for (i, (record_id, data)) in all_records.iter().enumerate() {
                let data_str = String::from_utf8_lossy(data);
                println!("   {} - ID: {}, –î–∞–Ω–Ω—ã–µ: {}", i + 1, record_id, data_str);
            }
        },
        Err(e) => {
            println!("   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {}", e);
        }
    }
    
    // –ß—Ç–µ–Ω–∏–µ —Å —É—Å–ª–æ–≤–∏–µ–º
    println!("\nüîç –ß—Ç–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–æ–º (—Å–æ–¥–µ—Ä–∂–∞—Ç 'Engineer'):");
    let condition = Box::new(|data: &[u8]| {
        String::from_utf8_lossy(data).contains("Engineer")
    });
    
    match manager.select(Some(condition)) {
        Ok(filtered_records) => {
            println!("   üìä –ù–∞–π–¥–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π —Å 'Engineer':", filtered_records.len());
            for (i, (record_id, data)) in filtered_records.iter().enumerate() {
                let data_str = String::from_utf8_lossy(data);
                println!("   {} - ID: {}, –î–∞–Ω–Ω—ã–µ: {}", i + 1, record_id, data_str);
            }
        },
        Err(e) => {
            println!("   ‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è: {}", e);
        }
    }
    
    // UPDATE –æ–ø–µ—Ä–∞—Ü–∏–∏
    if !record_ids.is_empty() {
        println!("\n‚úèÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:");
        let record_to_update = record_ids[0];
        let new_data = "Alice Johnson - Senior Software Engineer (Updated)".as_bytes();
        
        match manager.update(record_to_update, new_data) {
            Ok(update_result) => {
                println!("   ‚úÖ –ó–∞–ø–∏—Å—å {} –æ–±–Ω–æ–≤–ª–µ–Ω–∞", record_to_update);
                if update_result.in_place {
                    println!("   üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ –º–µ—Å—Ç–µ");
                } else {
                    println!("   üîÑ –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {:?}", 
                        update_result.new_page_id);
                }
            },
            Err(e) => {
                println!("   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", e);
            }
        }
    }
    
    // DELETE –æ–ø–µ—Ä–∞—Ü–∏–∏
    if record_ids.len() > 1 {
        println!("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:");
        let record_to_delete = record_ids[1];
        
        match manager.delete(record_to_delete) {
            Ok(delete_result) => {
                println!("   ‚úÖ –ó–∞–ø–∏—Å—å {} —É–¥–∞–ª–µ–Ω–∞", record_to_delete);
                if delete_result.physical_delete {
                    println!("   üóëÔ∏è  –§–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ");
                } else {
                    println!("   üëª –õ–æ–≥–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ");
                }
                if delete_result.page_merge {
                    println!("   üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü");
                }
            },
            Err(e) => {
                println!("   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {}", e);
            }
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let stats = manager.get_statistics();
    println!("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π:");
    println!("   - –í—Å—Ç–∞–≤–∫–∏: {}", stats.insert_operations);
    println!("   - –ß—Ç–µ–Ω–∏—è: {}", stats.select_operations);
    println!("   - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", stats.update_operations);
    println!("   - –£–¥–∞–ª–µ–Ω–∏—è: {}", stats.delete_operations);
    
    Ok(())
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç batch –æ–ø–µ—Ä–∞—Ü–∏–∏
fn demo_batch_operations(data_dir: &Path) -> Result<(), Box<dyn std::error::Error>> {
    println!("\nüì¶ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è batch –æ–ø–µ—Ä–∞—Ü–∏–π");
    println!("{}", "-".repeat(30));
    
    let config = PageManagerConfig {
        batch_size: 10, // –ù–µ–±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä batch –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        ..PageManagerConfig::default()
    };
    
    let manager_result = PageManager::new(data_dir.to_path_buf(), "batch_table", config);
    let mut manager = match manager_result {
        Ok(mgr) => mgr,
        Err(e) => {
            println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PageManager: {}", e);
            return Ok(());
        }
    };
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è batch –≤—Å—Ç–∞–≤–∫–∏
    let batch_data: Vec<Vec<u8>> = (1..=25).map(|i| {
        format!("Batch Record #{:03} - Generated Data", i).into_bytes()
    }).collect();
    
    println!("üì• Batch –≤—Å—Ç–∞–≤–∫–∞ {} –∑–∞–ø–∏—Å–µ–π:", batch_data.len());
    
    match manager.batch_insert(batch_data.clone()) {
        Ok(results) => {
            println!("   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} –∑–∞–ø–∏—Å–µ–π", results.len());
            
            let mut page_splits = 0;
            for result in &results {
                if result.page_split {
                    page_splits += 1;
                }
            }
            
            if page_splits > 0 {
                println!("   üîÑ –ü—Ä–æ–∏–∑–æ—à–ª–æ {} —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü", page_splits);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
            println!("   üìã –ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏:");
            for (i, result) in results.iter().take(5).enumerate() {
                println!("     {} - ID: {}, –°—Ç—Ä–∞–Ω–∏—Ü–∞: {}", 
                    i + 1, result.record_id, result.page_id);
            }
            
            if results.len() > 5 {
                println!("     ... –∏ –µ—â–µ {} –∑–∞–ø–∏—Å–µ–π", results.len() - 5);
            }
        },
        Err(e) => {
            println!("   ‚ùå –û—à–∏–±–∫–∞ batch –≤—Å—Ç–∞–≤–∫–∏: {}", e);
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    match manager.select(None) {
        Ok(all_records) => {
            println!("   üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {}", all_records.len());
        },
        Err(e) => {
            println!("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–µ–π: {}", e);
        }
    }
    
    let stats = manager.get_statistics();
    println!("   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ batch –æ–ø–µ—Ä–∞—Ü–∏–π:");
    println!("     - –í—Å–µ–≥–æ –≤—Å—Ç–∞–≤–æ–∫: {}", stats.insert_operations);
    println!("     - –†–∞–∑–¥–µ–ª–µ–Ω–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü: {}", stats.page_splits);
    
    Ok(())
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü
fn demo_defragmentation(data_dir: &Path) -> Result<(), Box<dyn std::error::Error>> {
    println!("\nüîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏");
    println!("{}", "-".repeat(30));
    
    let config = PageManagerConfig::default();
    let manager_result = PageManager::new(data_dir.to_path_buf(), "defrag_table", config);
    let mut manager = match manager_result {
        Ok(mgr) => mgr,
        Err(e) => {
            println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PageManager: {}", e);
            return Ok(());
        }
    };
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
    println!("üì• –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:");
    let mut record_ids = Vec::new();
    
    for i in 1..=15 {
        let data = format!("Fragmentation Test Record #{:02}", i).into_bytes();
        match manager.insert(&data) {
            Ok(result) => {
                record_ids.push(result.record_id);
            },
            Err(e) => {
                println!("   ‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ {}: {}", i, e);
            }
        }
    }
    
    println!("   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {} –∑–∞–ø–∏—Å–µ–π", record_ids.len());
    
    // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é –≤—Ç–æ—Ä—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    println!("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –≤—Ç–æ—Ä–æ–π –∑–∞–ø–∏—Å–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏):");
    let mut deleted_count = 0;
    
    for (i, &record_id) in record_ids.iter().enumerate() {
        if i % 2 == 1 { // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ—á–µ—Ç–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
            match manager.delete(record_id) {
                Ok(_) => {
                    deleted_count += 1;
                },
                Err(e) => {
                    println!("   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ {}: {}", record_id, e);
                }
            }
        }
    }
    
    println!("   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π", deleted_count);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    let stats_before = manager.get_statistics();
    println!("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:");
    println!("   - –û–ø–µ—Ä–∞—Ü–∏–π –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {}", stats_before.defragmentation_operations);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—é
    println!("\nüîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:");
    match manager.defragment() {
        Ok(defragmented_count) => {
            println!("   ‚úÖ –î–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {}", defragmented_count);
        },
        Err(e) => {
            println!("   ‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {}", e);
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    let stats_after = manager.get_statistics();
    println!("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:");
    println!("   - –û–ø–µ—Ä–∞—Ü–∏–π –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {}", stats_after.defragmentation_operations);
    println!("   - –í—Å–µ–≥–æ –≤—Å—Ç–∞–≤–æ–∫: {}", stats_after.insert_operations);
    println!("   - –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–π: {}", stats_after.delete_operations);
    
    Ok(())
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
fn demo_open_existing_manager(data_dir: &Path) -> Result<(), Box<dyn std::error::Error>> {
    println!("\nüîì –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞");
    println!("{}", "-".repeat(30));
    
    let table_name = "persistent_table";
    let config = PageManagerConfig::default();
    
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    println!("üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:");
    {
        let manager_result = PageManager::new(data_dir.to_path_buf(), table_name, config.clone());
        match manager_result {
            Ok(mut manager) => {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
                let persistent_data = [
                    "Persistent Record 1 - Will survive restart".as_bytes(),
                    "Persistent Record 2 - Stored on disk".as_bytes(),
                    "Persistent Record 3 - Available after reopen".as_bytes(),
                ];
                
                for (i, data) in persistent_data.iter().enumerate() {
                    match manager.insert(data) {
                        Ok(result) => {
                            println!("   ‚úÖ –ó–∞–ø–∏—Å—å {}: ID {}", i + 1, result.record_id);
                        },
                        Err(e) => {
                            println!("   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {}: {}", i + 1, e);
                        }
                    }
                }
                
                let stats = manager.get_statistics();
                println!("   üìä –í—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {}", stats.insert_operations);
            },
            Err(e) => {
                println!("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä: {}", e);
                return Ok(());
            }
        }
    } // manager –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
    println!("\nüîì –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:");
    match PageManager::open(data_dir.to_path_buf(), table_name, config) {
        Ok(mut manager) => {
            println!("   ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            match manager.select(None) {
                Ok(records) => {
                    println!("   üìä –ù–∞–π–¥–µ–Ω–æ {} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:", records.len());
                    for (i, (record_id, data)) in records.iter().enumerate() {
                        let data_str = String::from_utf8_lossy(data);
                        println!("     {} - ID: {}, –î–∞–Ω–Ω—ã–µ: {}", i + 1, record_id, data_str);
                    }
                },
                Err(e) => {
                    println!("   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {}", e);
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            match manager.insert("New Record - Added after reopen".as_bytes()) {
                Ok(result) => {
                    println!("   ‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: ID {}", result.record_id);
                },
                Err(e) => {
                    println!("   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏: {}", e);
                }
            }
        },
        Err(e) => {
            println!("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä: {}", e);
        }
    }
    
    Ok(())
}
